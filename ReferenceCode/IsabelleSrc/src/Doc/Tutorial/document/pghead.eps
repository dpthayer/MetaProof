%!PS-Adobe-3.0 EPSF-3.0%%Title: (portrait-head copy)%%Version: 1 6%%Creator: Adobe Acrobat 7.0%%CreationDate: 26/05/2005 09:00%%DocumentData: Clean7Bit%%LanguageLevel: 2%%ADO_ContainsXMP: MainFirst%%BoundingBox: 172 54 468 463%%HiResBoundingBox: 172.0 54.0 468.0 463.0%%Pages: 0%%DocumentProcessColors: Black%%DocumentSuppliedResources:%%+ procset (Adobe Acrobat - PDF operators) 1.2 0%%EndComments%%BeginProlog%%EndProlog%%BeginSetup%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.systemdict /languagelevel known{ systemdict /languagelevel get 1 eq }{ true }ifelse{initgraphics /Helvetica findfont 18 scalefont setfont72 600 moveto (Error: This application does not support) dup show72 580 moveto (printing to a PostScript Language Level 1 printer.) dup showexch = =/Times-Roman findfont 16 scalefont setfont72 500 moveto (As a workaround, try selecting Print As Image from) show72 480 moveto (the Advanced Print dialog.) showshowpagequit}if%%EndResource/currentpacking where{pop currentpacking true setpacking}if%%BeginResource: procset pdfvars 6.0 1%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.%%Title: definition of dictionary of variables used by PDF & PDFText procsetsuserdict /PDF 162 dict putuserdict /PDFVars 89 dict dup begin put/docSetupDone false def/InitAll 0 def/TermAll 0 def/DocInitAll 0 def/DocTermAll 0 def/_pdfEncodings 2 array def/_pdf_str1 1 string def/_pdf_i 0 def/_pdf_na 0 def/_pdf_showproc 0 def/_italMtx [1 0 .212557 1 0 0] def/_italMtx_WMode1 [1 -.212557 0 1 0 0] def/_italMtxType0 [1 0 .1062785 1 0 0] def/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def/_basefont 0 def/_basefonto 0 def/_pdf_oldCIDInit null def/_pdf_FontDirectory 30 dict def/_categories 10 dict def/_sa? true def/_ColorSep5044? false def/nulldict 0 dict def/_processColors 0 def/overprintstack null def/_defaulttransfer currenttransfer def/_defaultflatness currentflat def/_defaulthalftone null def/_defaultcolortransfer null def/_defaultblackgeneration null def/_defaultundercolorremoval null def/_defaultcolortransfer null defPDF begin[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W/applyInterpFunc/applystitchFunc/domainClip/encodeInput/initgs/int/limit/rangeClip/defineRes/undefineRes/findRes/setSA/pl/? /! /| /: /+ /GetGlyphDirectory/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage/pdf_shfill /pdf_sethalftone] {null def} bind forallendend%%EndResourcePDFVars begin PDF begin%%BeginResource: procset pdfutil 6.0 1%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.%%Title: Basic utilities used by other PDF procsets/bd {bind def} bind def/ld {load def} bd/bld {dup length dict begin{ null def } forallbindenddef} bd/dd { PDFVars 3 1 roll put } bd/xdd { exch dd } bd/Level2?systemdict /languagelevel known{ systemdict /languagelevel get 2 ge } { false } ifelsedef/Level1? Level2? not def/Level3?systemdict /languagelevel known{systemdict /languagelevel get 3 eq } { false } ifelsedef/getifknown {2 copy known { get true } { pop pop false } ifelse} bd/here {currentdict exch getifknown} bd/isdefined? { where { pop true } { false } ifelse } bd%%EndResource%%BeginResource: procset pdf 6.0 1%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.%%Title: General operators for PDF, common to all Language Levels./cm { matrix astore concat } bd/d /setdash ld/f /fill ld/h /closepath ld/i {dup 0 eq {pop _defaultflatness} if setflat} bd/j /setlinejoin ld/J /setlinecap ld/M /setmiterlimit ld/n /newpath ld/S /stroke ld/w /setlinewidth ld/W /clip ld/sg /setgray ld/initgs {0 setgray[] 0 d0 j0 J10 M1 wfalse setSA/_defaulttransfer load settransfer0 i/RelativeColorimetric rinewpath} bd/int {dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mulexch pop add exch pop} bd/limit {dup 2 index le { exch } if popdup 2 index ge { exch } if pop} bd/domainClip {Domain aload pop 3 2 rolllimit} [/Domain] bld/applyInterpFunc {0 1 DimOut 1 sub{dup C0 exch get exchdup C1 exch get exch3 1 roll1 index sub3 indexN exp mul addexchcurrentdict /Range_lo known{dup Range_lo exch get exchRange_hi exch get3 2 roll limit}{pop}ifelseexch} forpop} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld/encodeInput {NumParts 1 sub0 1 2 index{dup Bounds exch get2 index gt{ exit }{ dup3 index eq{ exit }{ pop } ifelse} ifelse} for3 2 roll popdup Bounds exch get exchdup 1 add Bounds exch get exch2 muldup Encode exch get exch1 add Encode exch getint} [/NumParts /Bounds /Encode] bld/rangeClip {exch dup Range_lo exch getexch Range_hi exch get3 2 rolllimit} [/Range_lo /Range_hi] bld/applyStitchFunc {Functions exch get execcurrentdict /Range_lo known {0 1 DimOut 1 sub {DimOut 1 add -1 rollrangeClip} for} if} [/Functions /Range_lo /DimOut] bld/pdf_flushfilters{aload length{ dup status1 index currentfile ne and{ dup flushfile closefile }{ pop }ifelse} repeat} bd/pdf_readstring{1 index dup length 1 sub getexch readstring popexch pdf_flushfilters} bind def/pdf_dictOp{3 2 roll10 dict copybegin_Filters dup length 1 sub get defcurrentdict exch exec_Filters pdf_flushfiltersend} [/_Filters] bld/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd/pdf_shfill {{sh} /DataSource pdf_dictOp} bd/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd/masks [ 2#100000002#110000002#111000002#111100002#111110002#111111002#111111102#11111111 ] def/addNBits{/numBits exch def/byte exch defOutBitOffset numBits add 8 gt{byte OutBitOffset 8 sub bitshiftOutBuffer OutByteIndex get orOutBuffer OutByteIndex 3 -1 roll put/OutByteIndex OutByteIndex 1 add def/bitsDoneSoFar OutBitOffset def/OutBitOffset numBits 8 OutBitOffset sub sub defOutBitOffset 0 gt{byte bitsDoneSoFar bitshiftmasks numBits bitsDoneSoFar sub get andOutBuffer OutByteIndex 3 -1 roll put} if}{byte masks numBits 1 sub get andOutBitOffset neg bitshiftOutBuffer OutByteIndex get orOutBuffer OutByteIndex 3 -1 roll put/OutBitOffset OutBitOffset numBits add defOutBitOffset 8 eq{/OutBitOffset 0 def/OutByteIndex OutByteIndex 1 add def} if} ifelse} bind def/DevNNFilter{/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string defAllSource InBuffer readstring pop pop/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def/OutBuffer outlen string def0 1 outlen 1 sub { OutBuffer exch 0 put } for/InByteIndex 0 def/InBitOffset 0 def/OutByteIndex 0 def/OutBitOffset 0 def/KeepArray NumComps array def0 1 NumComps 1 sub { KeepArray exch true put } forDevNNones { KeepArray exch false put } forallWidth {KeepArray{{/bitsLeft BitsPerComponent def{bitsLeft 0 le { exit } if/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if defInBuffer InByteIndex getInBitOffset bitshiftbitsToDo addNBits/bitsLeft bitsLeft bitsToDo sub defInBitOffset bitsToDo adddup 8 mod /InBitOffset exch def8 idiv InByteIndex add /InByteIndex exch def} loop}{InBitOffset BitsPerComponent adddup 8 mod /InBitOffset exch def8 idiv InByteIndex add /InByteIndex exch def}ifelse}forall} repeatOutBuffer} bd/pdf_image{20 dict copybegin/UnusedNones where { /UnusedNones get}{false} ifelse{/NumComps Decode length 2 div cvi def/OrigDecode Decode def/NumNones DevNNones length def/NewNumComps NumComps NumNones sub def/Decode NewNumComps 2 mul cvi array def/devNNindx 0 def/decIndx 0 def/cmpIndx 0 defNumComps {cmpIndx DevNNones devNNindx get eq{/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def}{Decode decIndx OrigDecode cmpIndx 2 mul get putDecode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put/decIndx decIndx 2 add def} ifelse/cmpIndx cmpIndx 1 add def} repeat_Filters dup length 1 sub get /AllSource exch def/DataSource { DevNNFilter } def}{ _Filters dup length 1 sub get /DataSource exch def }ifelsecurrentdict image_Filters pdf_flushfiltersend} bd/pdf_maskedImage{10 dict copy begin/miDict currentdict def/DataDict DataDict 10 dict copy defDataDict begin/DataSource_Filters dup length 1 sub getdefmiDict image_Filters pdf_flushfiltersendmiDict /InterleaveType get 3 eq{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }ifend} [/miDict /DataDict /_Filters] bld/RadialShade {40 dict begin/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch defgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div defAA -1 eq{ /theta 89.99 def}{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}ifelse/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div defAA -1 eq{ /theta 89.99 def}{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}ifelse/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bd/GenStrips {40 dict begin/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch defgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bd/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{/PDFMark5 {cleartomark} bd}{/PDFMark5 {pdfmark} bd}ifelse/ReadByPDFMark5{2 dict begin/makerString exch def string /tmpString exch def{currentfile tmpString readline popmakerString anchorsearch{pop pop cleartomark exit}{3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5} ifelse}loopend}bd%%EndResource%%BeginResource: procset pdflev2 6.0 1%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.%%Title: PDF operators, with code specific for Level 2/docinitialize {PDF begin/_defaulthalftone currenthalftone dd/_defaultblackgeneration currentblackgeneration dd/_defaultundercolorremoval currentundercolorremoval dd/_defaultcolortransfer [currentcolortransfer] dd/_defaulttransfer currenttransfer ddendPDFVars /docSetupDone true put} bd/initialize {PDFVars /docSetupDone get {_defaulthalftone sethalftone/_defaultblackgeneration load setblackgeneration/_defaultundercolorremoval load setundercolorremoval_defaultcolortransfer aload pop setcolortransfer} iffalse setoverprint} bd/terminate { } bd/c /curveto ld/cs /setcolorspace ld/l /lineto ld/m /moveto ld/q /gsave ld/Q /grestore ld/sc /setcolor ld/setSA/setstrokeadjust ld/re {4 2 roll m1 index 0 rlineto0 exch rlinetoneg 0 rlinetoh} bd/concattransferfuncs {[ 3 1 roll /exec load exch /exec load ] cvx} bd/concatandsettransfer {/_defaulttransfer load concattransferfuncs settransfer} bd/concatandsetcolortransfer {_defaultcolortransfer aload pop8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll4 -1 roll 3 -1 roll concattransferfuncs 3 1 rollconcattransferfuncssetcolortransfer} bd/defineRes/defineresource ld/undefineRes/undefineresource ld/findRes/findresource ldcurrentglobaltrue systemdict /setglobal get exec[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]{ /Generic /Category findresource dup length dict copy /Category defineresource pop }forallsystemdict /setglobal get exec/ri{/findcolorrendering isdefined?{mark exchfindcolorrenderingcounttomark 2 eq{ type /booleantype eq{ dup type /nametype eq{ dup /ColorRendering resourcestatus{ pop popdup /DefaultColorRendering ne{/ColorRendering findresourcesetcolorrendering} if} if} if} if} ifcleartomark}{ pop} ifelse} bd/knownColorants? {pop false} bd/getrampcolor {cvi/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forsetcolor} bd/sssetbackground { aload pop setcolor } bd%%EndResource%%BeginResource: procset pdftext 6.0 1%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.%%Title: Text operators for PDFPDF /PDFText 78 dict dup begin put/docinitialize{/resourcestatus where {pop/CIDParams /ProcSet resourcestatus {pop popfalse /CIDParams /ProcSet findresource /SetBuildCompatible get exec} if} ifPDF beginPDFText /_pdfDefineIdentity-H known{ PDFText /_pdfDefineIdentity-H get exec}ifend} bd/initialize {PDFText begin} bd/terminate { end } bdLevel2?{/_safeput{3 -1 roll load 3 1 roll put}bd}{/_safeput{2 index load dup dup length exch maxlength ge{ dup length 5 add dict copy3 index xdd}{ pop }ifelse3 -1 roll load 3 1 roll put}bd}ifelse/pdf_has_composefont? systemdict /composefont known def/CopyFont {{1 index /FID ne 2 index /UniqueID ne and{ def } { pop pop } ifelse} forall} bd/Type0CopyFont{exchdup length dictbeginCopyFont[exchFDepVector{dup /FontType get 0 eq{1 index Type0CopyFont/_pdfType0 exch definefont}{/_pdfBaseFont exch2 index exec}ifelseexch}forallpop]/FDepVector exch defcurrentdictend} bdLevel2? {currentglobal true setglobal} if/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] defLevel2? {setglobal} if/modEnc {/_enc xdd/_icode 0 ddcounttomark 1 sub -1 0{indexdup type /nametype eq{_enc _icode 3 -1 roll put_icode 1 add}if/_icode xdd} forcleartomark_enc} bd/trEnc {/_enc xdd255 -1 0 {exch dup -1 eq{ pop /.notdef }{ Encoding exch get }ifelse_enc 3 1 roll put} forpop_enc} bd/TE {/_i xddStandardEncoding 256 array copy modEnc_pdfEncodings exch _i exch put} bdLevel2?{/pdfPatchCStrings{currentdict /CharStrings known currentdict /FontType known and{FontType 1 eq CharStrings type /dicttype eq and{CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and{CharStrings /mu gettype /stringtype eq{currentglobalCharStrings /mu1CharStrings /mu getdup gcheck setglobaldup length string copyputsetglobal} if} if} if} if} bd}{ /pdfPatchCStrings {} bd }ifelse/TZ{/_usePDFEncoding xddfindfontdup length 6 add dictbegin{1 index /FID ne { def } { pop pop } ifelse} forallpdfPatchCStrings/pdf_origFontName FontName def/FontName exch defcurrentdict /PaintType known{ PaintType 2 eq {/PaintType 0 def} if }if_usePDFEncoding 0 ge{/Encoding _pdfEncodings _usePDFEncoding get defpop}{_usePDFEncoding -1 eq{counttomark 0 eq{ pop }{Encoding 256 array copymodEnc /Encoding exch def}ifelse}{256 arraytrEnc /Encoding exch def}ifelse}ifelsepdf_EuroProcSet pdf_origFontName known{pdf_origFontName pdf_AddEuroGlyphProc} ifLevel2?{currentdict /pdf_origFontName undef} ifFontName currentdictenddefinefont pop}bdLevel2?{/TZG{currentglobal true setglobal2 index _pdfFontStatus{2 index findfontfalse setglobal3 index findfonttrue setglobalne{2 index findfont dup rcheck{dup length dict begin{1 index /FID ne { def } { pop pop } ifelse} forallpdfPatchCStringscurrentdict end}if3 index exch definefont pop}if} ifsetglobalTZ} bd}{/TZG {TZ} bd} ifelseLevel2?{currentglobal false setglobaluserdict /pdftext_data 5 dict putpdftext_databegin/saveStacks{pdftext_databegin/vmmode currentglobal deffalse setglobalcount array astore /os exch defendcountdictstack array dictstack pdftext_data exch /ds exch putcleardictstack pdftext_data /dscount countdictstack putpdftext_data /vmmode get setglobal} bind def/restoreStacks{pdftext_data /vmmode currentglobal put false setglobalclear cleardictstackpdftext_data /ds get duppdftext_data /dscount get 1 2 index length 1 sub{ get begin dup } forpop poppdftext_data /os get aload poppdftext_data /vmmode get setglobal} bind def/testForClonePrinterBug{currentglobal true setglobal/undefinedCategory /Generic /Category findresourcedup length dict copy /Category defineresource popsetglobalpdftext_data /saveStacks get execpdftext_data /vmmode currentglobal put false setglobal/undefined /undefinedCategory { resourcestatus } stoppedpdftext_data exch /bugFound exch putpdftext_data /vmmode get setglobalpdftext_data /restoreStacks get execpdftext_data /bugFound get} bind defendsetglobal/pdf_resourcestatuspdftext_data /testForClonePrinterBug get exec{{pdftext_data /saveStacks get execpdftext_data /os get dup dup length 1 subdup 1 sub dup 0 lt { pop 0 } ifexch 1 exch { get exch dup } forpop pop{ resourcestatus }stopped{clear cleardictstack pdftext_data /restoreStacks get exec{ pop pop } stopped pop false}{count array astore pdftext_data exch /results exch putpdftext_data /restoreStacks get exec pop poppdftext_data /results get aload pop}ifelse}}{ { resourcestatus } }ifelsebd}ifLevel2?{/_pdfUndefineResource{currentglobal 3 1 roll_pdf_FontDirectory 2 index 2 copy known{undef}{pop pop}ifelse1 index (pdf) exch _pdfConcatNames 1 index1 index 1 _pdfConcatNames 1 index5 index 1 _pdfConcatNames 1 index4{2 copy pdf_resourcestatus{pop 2 lt{2 copy findresource gcheck setglobal undefineresource}{pop pop}ifelse}{ pop pop}ifelse} repeatsetglobal} bd}{/_pdfUndefineResource { pop pop} bd}ifelseLevel2?{/_pdfFontStatus{currentglobal exch/Font pdf_resourcestatus{pop pop true}{false}ifelseexch setglobal} bd}{/_pdfFontStatusString 50 string def_pdfFontStatusString 0 (fonts/) putinterval/_pdfFontStatus{FontDirectory 1 index known{ pop true }{_pdfFontStatusString 6 42 getintervalcvs length 6 add_pdfFontStatusString exch 0 exch getinterval{ status } stopped{pop false}{{ pop pop pop pop true}{ false }ifelse}ifelse}ifelse} bd}ifelseLevel2?{/_pdfCIDFontStatus{/CIDFont /Category pdf_resourcestatus{pop pop/CIDFont pdf_resourcestatus{pop pop true}{false}ifelse}{ pop false }ifelse} bd}if/_pdfString100 100 string def/_pdfComposeFontName{dup length 1 eq{0 get1 indextype /nametype eq{_pdfString100 cvslength dup dup _pdfString100 exch (-) putinterval_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval2 index exch cvs lengthadd 1 add _pdfString100 exch 0 exch getintervalexch poptrue}{pop popfalse}ifelse}{false}ifelsedup {exch cvn exch} if} bd/_pdfConcatNames{exch_pdfString100 cvslength dup dup _pdfString100 exch (-) putinterval_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval3 -1 roll exch cvs lengthadd 1 add _pdfString100 exch 0 exch getintervalcvn} bind def/_pdfTextTempString 50 string def/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def/_pdf_CheckCIDSystemInfo{1 index _pdfTextTempString cvs(Identity) anchorsearch{pop pop pop pop true}{false_pdfRegOrderingArray{2 index exchanchorsearch{ pop pop pop true exit}{ pop }ifelse}forallexch popexch /CIDFont findresource/CIDSystemInfo get3 -1 roll /CMap findresource/CIDSystemInfo getexch3 -1 roll{2 copy/Supplement getexchdup type /dicttype eq{/Supplement get}{pop 0 }ifelsege}{ true }ifelse{dup /Registry get2 index /Registry get eq{/Ordering getexch /Ordering getdup type /arraytype eq{1 index type /arraytype eq{true1 index length 1 sub -1 0{dup 2 index exch get exch 3 index exch get ne{ pop false exit}if} forexch pop exch pop}{ pop pop false }ifelse}{eq}ifelse}{ pop pop false }ifelse}{ pop pop false }ifelse}ifelse} bind defpdf_has_composefont?{/_pdfComposeFont{2 copy _pdfComposeFontName not{2 index}if(pdf) exch _pdfConcatNamesdup _pdfFontStatus{ dup findfont 5 2 roll pop pop pop true}{4 1 roll1 index /CMap pdf_resourcestatus{pop poptrue}{false}ifelse1 index true exch{_pdfCIDFontStatus not{pop false exit}if}foralland{1 index 1 index 0 get _pdf_CheckCIDSystemInfo{3 -1 roll pop2 index 3 1 rollcomposefont true}{pop pop exch pop false}ifelse}{_pdfComposeFontName{dup _pdfFontStatus{exch pop1 index exchfindfont definefont true}{pop exch popfalse}ifelse}{exch popfalse}ifelse}ifelse{ true }{dup _pdfFontStatus{ dup findfont true }{ pop false }ifelse}ifelse}ifelse} bd}{/_pdfComposeFont{_pdfComposeFontName not{dup}ifdup_pdfFontStatus{exch pop dup findfont true}{1 indexdup type /nametype eq{pop}{cvn}ifelseeq{pop false}{dup _pdfFontStatus{dup findfont true}{pop false}ifelse}ifelse}ifelse} bd}ifelse/_pdfStyleDicts 4 dict dup begin/Adobe-Japan1 4 dict dup beginLevel2?{/Serif/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus{/HeiseiMin-W3}{/HeiseiMin-W3 _pdfCIDFontStatus{/HeiseiMin-W3}{/Ryumin-Light}ifelse}ifelsedef/SansSerif/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus{/HeiseiKakuGo-W5}{/HeiseiKakuGo-W5 _pdfCIDFontStatus{/HeiseiKakuGo-W5}{/GothicBBB-Medium}ifelse}ifelsedef/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus{/HeiseiMaruGo-W4}{/HeiseiMaruGo-W4 _pdfCIDFontStatus{/HeiseiMaruGo-W4}{/Jun101-Light-RKSJ-H _pdfFontStatus{ /Jun101-Light }{ SansSerif }ifelse}ifelse}ifelse/RoundSansSerif exch def/Default Serif def}{/Serif /Ryumin-Light def/SansSerif /GothicBBB-Medium def{(fonts/Jun101-Light-83pv-RKSJ-H) status}stopped{pop}{{ pop pop pop pop /Jun101-Light }{ SansSerif }ifelse/RoundSansSerif exch def}ifelse/Default Serif def}ifelseenddef/Adobe-Korea1 4 dict dup begin/Serif /HYSMyeongJo-Medium def/SansSerif /HYGoThic-Medium def/RoundSansSerif SansSerif def/Default Serif defenddef/Adobe-GB1 4 dict dup begin/Serif /STSong-Light def/SansSerif /STHeiti-Regular def/RoundSansSerif SansSerif def/Default Serif defenddef/Adobe-CNS1 4 dict dup begin/Serif /MKai-Medium def/SansSerif /MHei-Medium def/RoundSansSerif SansSerif def/Default Serif defenddefenddef/TZzero{/_wmode xdd/_styleArr xdd/_regOrdering xdd3 copy_pdfComposeFont{5 2 roll pop pop pop}{[0 1 _styleArr length 1 sub{_styleArr exch get_pdfStyleDicts _regOrdering 2 copy known{getexch 2 copy known not{ pop /Default }ifget}{pop pop pop /Unknown}ifelse}for]exch pop2 index 3 1 roll_pdfComposeFont{3 -1 roll pop}{findfont dup /FontName get exch}ifelse}ifelsedup /WMode 2 copy known{ get _wmode ne }{ pop pop _wmode 1 eq}ifelse{exch _wmode _pdfConcatNamesdup _pdfFontStatus{ exch pop dup findfont false}{ exch true }ifelse}{dup /FontType get 0 ne}ifelse{dup /FontType get 3 eq _wmode 1 eq and{_pdfVerticalRomanT3Font dup length 10 add dict copybegin/_basefont exchdup length 3 add dictbegin{1 index /FID ne {def}{pop pop} ifelse }forall/Encoding Encoding dup length array copydup 16#27 /quotesingle putdup 16#60 /grave put_regOrdering /Adobe-Japan1 eq{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}ifdefFontNamecurrentdictenddefinefontdef/Encoding _basefont /Encoding get def/_fauxfont true def}{dup length 3 add dictbegin{1 index /FID ne {def}{pop pop} ifelse }forallFontType 0 ne{/Encoding Encoding dup length array copydup 16#27 /quotesingle putdup 16#60 /grave put_regOrdering /Adobe-Japan1 eq{dup 16#5c /yen put}ifdef/_fauxfont true def} if} ifelse/WMode _wmode defdup dup /FontName exch defcurrentdictenddefinefont pop}{pop}ifelse/_pdf_FontDirectory 3 1 roll _safeput}bdLevel2?{/Tf {_pdf_FontDirectory 2 index 2 copy known{get exch 3 -1 roll pop}{pop pop}ifelseselectfont} bd}{/Tf {_pdf_FontDirectory 2 index 2 copy known{get exch 3 -1 roll pop}{pop pop}ifelseexch findfont exchdup type /arraytype eq{makefont}{scalefont}ifelsesetfont} bd}ifelse/cshow where{pop /pdf_cshow /cshow load dd/pdf_remove2 {pop pop} dd}{/pdf_cshow {exch forall} dd/pdf_remove2 {} dd} ifelse/pdf_xshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{_pdf_x _pdf_y moveto0rmoveto}ifelse_pdf_i 1 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdf_yshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{_pdf_x _pdf_y moveto0 exchrmoveto}ifelse_pdf_i 1 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdf_xyshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{{_pdf_na _pdf_i 1 add get} stopped{ pop pop pop}{_pdf_x _pdf_y movetormoveto}ifelse}ifelse_pdf_i 2 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bdLevel2? _ColorSep5044? not and{/pdfxs {{xshow} stopped {pdfl1xs} if} bd/pdfys {{yshow} stopped {pdfl1ys} if} bd/pdfxys {{xyshow} stopped {pdfl1xys} if} bd}{/pdfxs /pdfl1xs load dd/pdfys /pdfl1ys load dd/pdfxys /pdfl1xys load dd} ifelse/pdf_charpath {false charpath} bd/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd/pdf_strokepath{{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 false charpathcurrentpoint S moveto} bindexch pdf_cshow} bd/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bdLevel2? {currentglobal true setglobal} if/d0/setcharwidth ld/nND {{/.notdef} repeat} bd/T3Defs {/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec}def/BuildGlyph {exch beginGlyphProcs exch get execend} def/_pdfT3Font true def} bd/_pdfBoldRomanWidthProc{stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth0 0} bd/_pdfType0WidthProc{dup stringwidth 0 0 moveto2 index true charpath pathbbox0 -17 index 2 div .88setcachedevice2pop0 0} bd/_pdfType0WMode1WidthProc{dup stringwidthpop 2 div neg -0.882 copymoveto0 -15 -1 roll true charpath pathbboxsetcachedevice} bd/_pdfBoldBaseFont11 dict begin/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding cHexEncoding def/_setwidthProc /_pdfBoldRomanWidthProc load def/_bcstr1 1 string def/BuildChar{exch begin_basefont setfont_bcstr1 dup 0 4 -1 roll putdup_setwidthProc3 copymovetoshow_basefonto setfontmovetoshowend}bdcurrentdictenddefpdf_has_composefont?{/_pdfBoldBaseCIDFont11 dict begin/CIDFontType 1 def/CIDFontName /_pdfBoldBaseCIDFont def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/_setwidthProc /_pdfType0WidthProc load def/_bcstr2 2 string def/BuildGlyph{exch begin_basefont setfont_bcstr2 1 2 index 256 mod put_bcstr2 0 3 -1 roll 256 idiv put_bcstr2 dup _setwidthProc3 copymovetoshow_basefonto setfontmovetoshowend}bdcurrentdictenddef/_pdfDefineIdentity-H{/Identity-H /CMap PDFText /pdf_resourcestatus get exec{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo3 dict begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defcurrentdictenddef/CMapName /Identity-H def/CMapVersion 1 def/CMapType 1 def1 begincodespacerange<0000> <ffff>endcodespacerange1 begincidrange<0000> <ffff> 0endcidrangeendcmapCMapName currentdict/CMap defineresource popendend} ifelse} def} if/_pdfVerticalRomanT3Font10 dict begin/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/_bcstr1 1 string def/BuildChar{exch begin_basefont setfont_bcstr1 dup 0 4 -1 roll putdup_pdfType0WidthProcmovetoshowend}bdcurrentdictenddefLevel2? {setglobal} if/MakeBoldFont{dup /ct_SyntheticBold known{dup length 3 add dict beginCopyFont/ct_StrokeWidth .03 0 FontMatrix idtransform pop def/ct_SyntheticBold true defcurrentdictenddefinefont}{dup dup length 3 add dictbeginCopyFont/PaintType 2 def/StrokeWidth .03 0 FontMatrix idtransform pop def/dummybold currentdictenddefinefontdup /FontType get dup 9 ge exch 11 le and{_pdfBoldBaseCIDFontdup length 3 add dict copy begindup /CIDSystemInfo get /CIDSystemInfo exch def/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont/_basefont exch def/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont/_basefonto exch defcurrentdictend/CIDFont defineresource}{_pdfBoldBaseFontdup length 3 add dict copy begin/_basefont exch def/_basefonto exch defcurrentdictenddefinefont}ifelse}ifelse} bd/MakeBold {1 index_pdf_FontDirectory 2 index 2 copy known{get}{exch pop}ifelsefindfontdup/FontType get 0 eq{dup /WMode known {dup /WMode get 1 eq }{false} ifelseversion length 4 geand{version 0 4 getinterval cvi 2015 ge }{true}ifelse{/_pdfType0WidthProc}{/_pdfType0WMode1WidthProc}ifelse_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put{MakeBoldFont} Type0CopyFont definefont}{dup /_fauxfont known not 1 index /SubstMaster known not and{_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load putMakeBoldFont}{2 index 2 index eq{ exch pop }{dup length dict beginCopyFontcurrentdictenddefinefont}ifelse}ifelse}ifelsepop popdup /dummybold ne{/_pdf_FontDirectory exch dup _safeput }{ pop }ifelse}bd/MakeItalic {_pdf_FontDirectory exch 2 copy known{get}{exch pop}ifelsedup findfontdup /FontInfo 2 copy known{get/ItalicAngle 2 copy known{get 0 eq }{ pop pop true}ifelse}{ pop pop true}ifelse{exch popdup /FontType get 0 eq Level2? not and{ dup /FMapType get 6 eq }{ false }ifelse{dup /WMode 2 copy known{get 1 eq{ _italMtx_WMode1Type0 }{ _italMtxType0 }ifelse}{ pop pop _italMtxType0 }ifelse}{dup /WMode 2 copy known{get 1 eq{ _italMtx_WMode1 }{ _italMtx }ifelse}{ pop pop _italMtx }ifelse}ifelsemakefontdup /FontType get 42 eq Level2? not or{dup length dict beginCopyFontcurrentdictend}if1 index exchdefinefont pop/_pdf_FontDirectory exch dup _safeput}{pop2 copy ne{/_pdf_FontDirectory 3 1 roll _safeput}{ pop pop }ifelse}ifelse}bd/MakeBoldItalic {/dummybold exchMakeBold/dummyboldMakeItalic}bdLevel2?{/pdf_CopyDict{1 index length add dict copy}def}{/pdf_CopyDict{1 index length add dict1 index wcheck{ copy }{ begin{def} forallcurrentdictend}ifelse}def}ifelse/pdf_AddEuroGlyphProc{currentdict /CharStrings known{CharStrings /Euro known not{dup/CharStringsCharStrings 1 pdf_CopyDictbegin/Euro pdf_EuroProcSet 4 -1 roll get defcurrentdictenddef/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def/pdf_PathOps /pdf_PathOps load def/Symbol eq Encoding 160 get /.notdef eq and{/Encoding Encoding dup length array copydup 160 /Euro put def}if}{ pop}ifelse}{ pop}ifelse}defLevel2? {currentglobal true setglobal} if/pdf_PathOps 4 dict dup begin/m {moveto} def/l {lineto} def/c {curveto} def/cp {closepath} defenddef/pdf_PSBuildGlyph{gsave8 -1 roll pop7 1 rollcurrentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelsedup 9 1 roll{currentdict /StrokeWidth 2 copy known{get 2 div5 1 roll4 -1 roll 4 index sub4 1 roll3 -1 roll 4 index sub3 1 rollexch 4 index add exch4 index add5 -1 roll pop}{pop pop}ifelse}ifsetcachedevicepdf_PathOps beginexecend{currentdict /StrokeWidth 2 copy known{ get }{ pop pop 0 }ifelsesetlinewidth stroke}{fill}ifelsegrestore} def/pdf_EuroProcSet 13 dict defpdf_EuroProcSetbegin/Courier-Bold{600 0 6 -12 585 612{385 274 m180 274 l179 283 179 293 179 303 c179 310 179 316 180 323 c398 323 l423 404 l197 404 l219 477 273 520 357 520 c409 520 466 490 487 454 c487 389 l579 389 l579 612 l487 612 l487 560 l449 595 394 612 349 612 c222 612 130 529 98 404 c31 404 l6 323 l86 323 l86 304 l86 294 86 284 87 274 c31 274 l6 193 l99 193 l129 77 211 -12 359 -12 c398 -12 509 8 585 77 c529 145 l497 123 436 80 356 80 c285 80 227 122 198 193 c360 193 lcp600 0 m}pdf_PSBuildGlyph} def/Courier-BoldOblique /Courier-Bold load def/Courier{600 0 17 -12 578 584{17 204 m97 204 l126 81 214 -12 361 -12 c440 -12 517 17 578 62 c554 109 l501 70 434 43 366 43 c266 43 184 101 154 204 c380 204 l400 259 l144 259 l144 270 143 281 143 292 c143 299 143 307 144 314 c418 314 l438 369 l153 369 l177 464 249 529 345 529 c415 529 484 503 522 463 c522 391 l576 391 l576 584 l522 584 l522 531 l473 566 420 584 348 584 c216 584 122 490 95 369 c37 369 l17 314 l87 314 l87 297 l87 284 88 272 89 259 c37 259 lcp600 0 m}pdf_PSBuildGlyph} def/Courier-Oblique /Courier load def/Helvetica{556 0 24 -19 541 703{541 628 m510 669 442 703 354 703 c201 703 117 607 101 444 c50 444 l25 372 l97 372 l97 301 l49 301 l24 229 l103 229 l124 67 209 -19 350 -19 c435 -19 501 25 509 32 c509 131 l492 105 417 60 343 60 c267 60 204 127 197 229 c406 229 l430 301 l191 301 l191 372 l455 372 l479 444 l194 444 l201 531 245 624 348 624 c433 624 484 583 509 534 ccp556 0 m}pdf_PSBuildGlyph} def/Helvetica-Oblique /Helvetica load def/Helvetica-Bold{556 0 12 -19 563 710{563 621 m537 659 463 710 363 710 c216 710 125 620 101 462 c51 462 l12 367 l92 367 l92 346 l92 337 93 328 93 319 c52 319 l12 224 l102 224 l131 58 228 -19 363 -19 c417 -19 471 -12 517 18 c517 146 l481 115 426 93 363 93 c283 93 254 166 246 224 c398 224 l438 319 l236 319 l236 367 l457 367 l497 462 l244 462 l259 552 298 598 363 598 c425 598 464 570 486 547 c507 526 513 517 517 509 ccp556 0 m}pdf_PSBuildGlyph} def/Helvetica-BoldOblique /Helvetica-Bold load def/Symbol{750 0 20 -12 714 685{714 581 m650 645 560 685 465 685 c304 685 165 580 128 432 c50 432 l20 369 l116 369 l115 356 115 347 115 337 c115 328 115 319 116 306 c50 306 l20 243 l128 243 l165 97 300 -12 465 -12 c560 -12 635 25 685 65 c685 155 l633 91 551 51 465 51 c340 51 238 131 199 243 c555 243 l585 306 l184 306 l183 317 182 326 182 336 c182 346 183 356 184 369 c614 369 l 644 432 l199 432 l233 540 340 622 465 622 c555 622 636 580 685 520 ccp750 0 m}pdf_PSBuildGlyph} def/Times-Bold{500 0 16 -14 478 700{367 308 m224 308 l224 368 l375 368 l380 414 l225 414 l230 589 257 653 315 653 c402 653 431 521 444 457 c473 457 l473 698 l444 697 l441 679 437 662 418 662 c393 662 365 700 310 700 c211 700 97 597 73 414 c21 414 l16 368 l69 368 l69 359 68 350 68 341 c68 330 68 319 69 308 c21 308 l16 262 l73 262 l91 119 161 -14 301 -14 c380 -14 443 50 478 116 c448 136 l415 84 382 40 323 40 c262 40 231 77 225 262 c362 262 lcp500 0 m}pdf_PSBuildGlyph} def/Times-BoldItalic{500 0 9 -20 542 686{542 686 m518 686 l513 673 507 660 495 660 c475 660 457 683 384 683 c285 683 170 584 122 430 c58 430 l34 369 l105 369 l101 354 92 328 90 312 c34 312 l9 251 l86 251 l85 238 84 223 84 207 c84 112 117 -14 272 -14 c326 -14 349 9 381 9 c393 9 393 -10 394 -20 c420 -20 l461 148 l429 148 l416 109 362 15 292 15 c227 15 197 55 197 128 c197 162 204 203 216 251 c378 251 l402 312 l227 312 l229 325 236 356 241 369 c425 369 l450 430 l255 430 l257 435 264 458 274 488 c298 561 337 654 394 654 c437 654 484 621 484 530 c484 516 l516 516 lcp500 0 m}pdf_PSBuildGlyph} def/Times-Italic{500 0 23 -10 595 692{399 317 m196 317 l199 340 203 363 209 386 c429 386 l444 424 l219 424 l246 514 307 648 418 648 c448 648 471 638 492 616 c529 576 524 529 527 479 c549 475 l595 687 l570 687 l562 674 558 664 542 664 c518 664 474 692 423 692 c275 692 162 551 116 424 c67 424 l53 386 l104 386 l98 363 93 340 90 317 c37 317 l23 279 l86 279 l85 266 85 253 85 240 c85 118 137 -10 277 -10 c370 -10 436 58 488 128 c466 149 l424 101 375 48 307 48 c212 48 190 160 190 234 c190 249 191 264 192 279 c384 279 lcp500 0 m}pdf_PSBuildGlyph} def/Times-Roman{500 0 10 -12 484 692{347 298 m171 298 l170 310 170 322 170 335 c170 362 l362 362 l374 403 l172 403 l184 580 244 642 308 642 c380 642 434 574 457 457 c481 462 l474 691 l449 691 l433 670 429 657 410 657 c394 657 360 692 299 692 c204 692 94 604 73 403 c22 403 l10 362 l70 362 l69 352 69 341 69 330 c69 319 69 308 70 298 c22 298 l10 257 l73 257 l97 57 216 -12 295 -12 c364 -12 427 25 484 123 c458 142 l425 101 384 37 316 37 c256 37 189 84 173 257 c335 257 lcp500 0 m}pdf_PSBuildGlyph} defendLevel2? {setglobal} ifcurrentdict readonly pop end%%EndResourcePDFText begin[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron0 TE[1/dotlessi/caron 39/quotesingle 96/grave 127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark/scaron/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis1 TEend%%BeginResource: procset pdfasc.prc 6.0 1%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved./ASR {13 dict begin/mirV? exch def/mirH? exch def/center? exch def/autorotate? exch def/angle exch def/shrink exch def/Pury exch def/Purx exch def/Plly exch def/Pllx exch def/Dury exch def/Durx exch def/Dlly exch def/Dllx exch defDury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }{ ITransDBBox }ifelse/PHt Pury Plly sub def/PW Purx Pllx sub def/DHt Dury Dlly sub def/DW Durx Dllx sub defangle 90 eq angle 270 eq or{PHt /PHt PW def /PW exch def} ifautorotate? PHt PW ne and DHt DW ne and{DHt DW gePHt PW gene{ /angle angle 90 add defPHt /PHt PW def /PW exch def}if} ifangle 0 ne{/angle angle 360 mod defangle rotateangle 90 eq{ 0 DW neg translate }ifangle 180 eq{ DW neg DHt neg translate }ifangle 270 eq{ DHt neg 0 translate }if} ifcenter?{ITransBBoxDurx Dllx add 2 div Dury Dlly add 2 divPurx Pllx add -2 div Pury Plly add -2 div3 -1 roll add exch3 -1 roll add exchtranslate}{ITransBBoxangle 0 eq{Dllx Pllx sub Dury Pury sub}ifangle 90 eq{Durx Purx sub Dury Pury sub}ifangle 180 eq{Durx Purx sub Dlly Plly sub}ifangle 270 eq{Dllx Pllx sub Dlly Plly sub}iftranslate}ifelsemirH? mirV? or{ITransBBoxmirH?{-1 1 scaleDurx Dllx add neg 0 translate} ifmirV?{1 -1 scale0 Dury Dlly add neg translate} if} ifshrink 0 ne{ITransBBoxDury Dlly sub Pury Plly sub divDurx Dllx sub Purx Pllx sub div2 copy gt { exch } if popshrink 1 eq{Durx Dllx add 2 div Dury Dlly add 2 div translatedup scalePurx Pllx add -2 div Pury Plly add -2 div translate}{shrink 2 eq 1 index 1.0 lt and{Durx Dllx add 2 div Dury Dlly add 2 div translatedup scalePurx Pllx add -2 div Pury Plly add -2 div translate}{ pop }ifelse}ifelse} ifend} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]bld/GClipBBox{gsave newpath clippath pathbbox newpath grestore/Dury exch def/Durx exch def/Dlly exch def/Dllx exch defITransDBBox} [/Durx /Dury /Dllx /Dlly]bld/GPageBBox{{currentpagedevice /PageSize get aload pop/Devury exch def /Devurx exch def/Devllx 0 def /Devlly 0 defITransBBox}stopped{ GClipBBox }if} [/Devurx /Devury /Devllx /Devlly ]bld/ITransDBBox{Durx Dury transform matrix defaultmatrix itransform/Devury exch def/Devurx exch defDllx Dlly transform matrix defaultmatrix itransform/Devlly exch def/Devllx exch defDevury Devlly lt {/Devlly Devury /Devury Devlly def def} ifDevurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]bld/ITransBBox{/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix defDevllx Devlly um itransformDevurx Devury um itransform/Dury exch def/Durx exch def/Dlly exch def/Dllx exch defDury Dlly lt {/Dlly Dury /Dury Dlly def def} ifDurx Dllx lt {/Dllx Durx /Durx Dllx def def} if} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]bld%%EndResourcecurrentdict readonly popend end/currentpacking where {pop setpacking}ifPDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF beginPDFVars/DocInitAll get exec PDFVars/InitAll get exec[/NamespacePush PDFMark5[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5[{Metadata_In_EPS} 17988 (% &end XMP packet& %) ReadByPDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-701">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2005-05-26T09:00:06+01:00</xap:CreateDate>
         <xap:ModifyDate>2005-05-26T09:00:06+01:00</xap:ModifyDate>
         <xap:MetadataDate>2005-05-26T09:00:06+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>196</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADEAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUJdaxpFozrdX1vbtEOUiyyohUEVq3Iim2KsV1X86vyn0q8+p33mnT0uaAlEmEoWppRmi5q&#xA;p9icVRFl+bn5W3ppbebdIZq0CNewIx77K7qTirJbLUtOv4vVsbqG7i/35BIsi/epI7YqiMVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUL6+stPs576+njtbO2Rpbi4lYJGiKKszM1AA&#xA;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&#xA;c2/7fn/M3FX/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E299AD35CF5611D9931E9E29EC286463</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E299AD35CF5611D9931E9E29EC286463</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e3e3a208-cd3c-11d9-8977-000d936c956e</stRef:instanceID>
            <stRef:documentID>uuid:AB03F8A6CDD611D982B3C176F4FB2AEE</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">portrait-head copy</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <photoshop:ColorMode>3</photoshop:ColorMode>
         <photoshop:History/>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>% &end XMP packet& %[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5[/NamespacePop PDFMark5PDFVars/TermAll get exec end end PDF /docinitialize get exec
%%EndSetupPDFVars begin PDF begin PDFVars/InitAll get exec172.0 54.0 296.0 409.0 rectclipq172.0 54.0 m468.0 54.0 l468.0 463.0 l172.0 463.0 lhWnqn0.0 480.0 640.0 -480.0 reWnqtrue setSA172.0 54.0 296.0 409.0 reWnn335.201 367.981 m333.385 369.335 330.805 369.835 328.2 368.652 c322.949 374.353 322.186 384.354 319.8 392.8 c315.154 386.669 307.689 378.628 311.4 368.652 c308.876 369.681 308.006 368.819 304.399 369.323 c304.324 380.208 313.847 387.489 318.4 396.154 c317.73 402.89 317.119 409.683 308.6 408.898 c311.234 410.792 315.023 413.818 319.8 411.582 c327.617 399.62 326.688 379.276 335.201 367.981 c[/DeviceGray] cs 1.0 sceofilln322.6 357.249 m318.99 354.59 309.367 354.389 304.399 355.237 c309.273 356.61 318.049 357.799 322.6 357.249 ceofilln273.598 353.896 m275.535 354.009 276.001 352.865 274.998 351.883 c278.4 352.2 281.25 353.047 284.098 353.896 c283.331 350.815 273.651 348.813 270.098 349.871 c270.095 352.333 272.549 352.441 273.598 353.896 ceofilln275.698 347.188 m271.917 344.774 266.738 343.699 262.397 341.821 c265.361 344.664 271.338 347.885 275.698 347.188 ceofilln246.296 343.163 m248.1 342.035 245.702 339.313 244.896 338.468 c244.126 330.771 243.94 342.296 246.296 343.163 ceofilln367.402 342.492 m382.533 343.126 391.632 332.171 399.604 323.71 c389.667 328.053 379.82 338.291 367.402 342.492 ceofilln263.797 337.126 m256.335 330.414 249.26 323.331 240.696 317.674 c242.625 325.219 252.857 330.614 258.897 336.455 c261.325 335.917 261.588 337.454 263.797 337.126 ceofilln242.096 334.443 m243.162 332.5 239.825 329.038 239.996 325.723 c238.557 328.023 240.96 332.381 242.096 334.443 ceofilln349.901 292.855 m345.818 290.507 339.01 290.771 332.4 290.843 c335.809 294.692 344.583 293.494 349.901 292.855 c0.0 sceofilln380.003 243.889 m361.751 227.327 333.626 256.615 328.9 270.049 c320.358 294.333 372.045 299.295 382.804 283.464 c383.45 282.512 385.821 277.044 385.604 274.745 c385.214 270.637 378.237 264.074 377.903 255.963 c377.744 252.102 378.594 248.677 380.003 243.889 ceofilln303.699 289.501 m300.093 289.492 299.222 288.63 296.699 290.172 c298.743 290.818 303.655 292.552 303.699 289.501 c1.0 sceofilln405.904 243.889 m405.44 241.427 405.159 238.79 404.504 236.511 c400.915 236.201 401.338 239.737 397.504 239.193 c398.963 243.326 400.66 244.252 405.904 243.889 c0.0 sceofilln313.5 231.145 m316.143 231.441 316.786 229.821 318.4 229.132 c317.548 228.16 315.604 228.233 315.6 226.449 c314.251 226.722 315.047 229.05 312.8 228.461 c312.711 229.664 313.657 229.876 313.5 231.145 c1.0 sceofilln234.396 223.766 m235.994 221.496 236.419 218.103 236.496 214.375 c235.048 216.789 233.883 219.474 234.396 223.766 c0.0 sceofilln236.496 213.704 m237.603 212.306 238.778 210.972 239.296 209.009 c239.95 209.501 240.357 210.229 240.696 211.021 c243.049 209.716 241.634 205.406 242.096 200.96 c240.518 201.459 241.823 204.722 241.396 206.326 c241.263 206.869 240.694 206.994 240.696 207.668 c239.257 207.358 239.345 209.687 236.496 209.68 cheofilln240.696 192.91 m242.821 189.055 239.509 178.342 241.396 172.117 c239.354 169.795 240.487 182.937 240.696 186.203 c240.851 188.61 240.575 191.107 240.696 192.91 ceofilln308.6 162.055 m314.675 154.383 312.125 145.973 317.7 138.578 c316.42 136.645 316.564 136.48 317.0 133.883 c313.95 133.228 311.994 131.525 310.0 129.858 c307.797 129.537 307.263 130.813 305.799 131.2 c305.191 140.651 304.613 147.547 307.899 154.006 c303.2 152.07 309.483 158.048 308.6 162.055 c1.0 sceofilln244.896 143.273 m244.156 129.208 241.88 108.192 242.796 92.966 c236.285 107.105 239.955 130.17 244.896 143.273 ceofilln302.299 118.455 m306.008 120.202 310.441 116.88 315.6 117.784 c314.137 116.504 312.257 115.621 310.0 115.102 c310.43 115.698 310.846 116.301 310.0 116.442 c306.528 115.744 305.256 112.939 301.599 112.418 c301.313 110.802 302.878 110.96 302.299 109.064 c295.729 97.919 290.589 85.405 283.398 74.855 c276.968 92.139 288.191 102.929 294.599 113.76 c297.204 114.617 300.502 114.811 303.0 115.772 c302.941 116.834 303.336 118.33 302.299 118.455 ceofilln261.697 113.76 m269.896 111.554 271.323 102.86 274.998 96.319 c272.167 96.234 266.496 98.782 261.697 99.003 cheofilln453.507 21.864 m451.755 21.308 450.758 20.026 448.606 19.852 c448.186 29.957 446.449 38.803 445.807 48.695 c446.854 49.48 448.67 49.529 449.307 50.707 c452.953 43.245 452.55 31.903 453.507 21.864 ceofilln455.606 50.036 m458.758 41.682 459.65 32.563 459.107 23.206 c456.895 31.84 456.211 41.077 455.606 50.036 ceofilln508.109 24.547 m511.355 28.32 510.013 38.014 502.509 37.292 c500.598 31.98 503.062 25.393 508.109 24.547 c510.21 23.877 m501.324 22.965 498.933 28.274 499.009 35.95 c505.278 45.055 517.523 31.475 510.21 23.877 c0.0 sceofilln502.509 37.292 m510.013 38.014 511.355 28.32 508.109 24.547 c503.062 25.393 500.598 31.98 502.509 37.292 c1.0 sceofilln517.91 35.95 m514.734 31.577 517.265 22.836 523.51 23.206 c525.542 27.478 524.332 35.844 517.91 35.95 c524.91 22.535 m525.076 20.682 528.859 22.295 528.41 19.852 c524.141 16.739 520.433 25.449 517.21 21.193 c516.797 25.973 513.585 27.31 513.71 33.938 c519.671 43.435 532.165 29.572 524.91 22.535 c0.0 sceofilln523.51 23.206 m517.265 22.836 514.734 31.577 517.91 35.95 c524.332 35.844 525.542 27.478 523.51 23.206 c1.0 sceofilln284.798 30.584 m287.068 31.878 288.612 30.792 291.099 30.584 c291.099 24.547 l288.065 25.665 287.627 29.27 284.798 30.584 ceofilln433.906 12.474 m434.501 12.597 434.566 12.212 434.605 11.803 c434.492 11.022 434.761 10.609 435.306 10.461 c435.139 4.936 436.164 -1.384 436.706 -7.649 c437.207 -13.44 439.325 -20.188 436.006 -22.406 c431.935 -20.405 432.173 -13.479 431.806 -8.32 c431.358 -2.04 432.145 5.144 431.806 11.132 c432.37 11.709 433.724 11.53 433.906 12.474 ceofilln420.605 -25.761 m421.2 -25.637 421.266 -26.022 421.305 -26.432 c421.177 -27.002 421.578 -27.063 422.005 -27.102 c422.263 -33.01 422.791 -40.389 423.405 -47.225 c423.912 -52.866 427.445 -61.162 421.305 -63.323 c419.491 -51.869 419.411 -38.755 417.805 -27.102 c419.108 -27.01 420.145 -26.661 420.605 -25.761 ceofilln455.606 -37.163 m455.987 -39.606 456.104 -40.257 457.007 -43.2 c454.473 -41.866 454.052 -35.555 449.307 -38.505 c453.136 -43.367 461.496 -48.421 455.606 -55.274 c452.412 -55.876 451.639 -54.157 449.307 -53.933 c450.123 -50.738 447.19 -48.917 448.606 -47.225 c449.906 -49.78 451.392 -52.158 453.507 -53.933 c455.754 -54.521 454.958 -52.193 456.307 -51.92 c454.046 -46.284 446.483 -45.169 447.906 -37.834 c449.713 -35.324 452.823 -35.775 455.606 -37.163 c0.0 sceofilln463.308 -47.225 m464.538 -46.839 467.42 -48.036 467.508 -46.555 c464.521 -46.487 465.668 -42.06 464.707 -41.859 c464.017 -43.434 463.479 -45.154 463.308 -47.225 c464.008 -36.493 m469.731 -41.293 470.361 -50.975 475.208 -56.616 c473.366 -55.921 470.912 -55.813 468.207 -55.945 c468.848 -54.77 468.448 -52.599 469.607 -51.92 c467.864 -49.391 465.679 -48.632 462.607 -49.908 c461.353 -53.794 464.99 -52.991 464.707 -55.945 c463.105 -55.244 460.484 -55.52 459.107 -54.604 c462.148 -49.915 462.82 -42.957 464.008 -36.493 ceofilln478.708 -39.847 m481.508 -39.847 l482.104 -41.735 483.77 -42.599 483.608 -45.213 c482.284 -46.543 480.301 -45.538 478.708 -45.213 c480.231 -43.992 477.185 -41.067 478.708 -39.847 c1.0 sceofilln428.306 -42.529 m432.835 -44.021 429.524 -46.889 431.105 -50.579 c427.428 -48.271 430.559 -45.576 428.306 -42.529 ceofilln479.408 -47.896 m481.681 -47.507 482.665 -48.353 484.309 -48.566 c485.405 -51.125 485.772 -52.598 484.309 -55.274 c479.157 -55.492 479.966 -50.419 479.408 -47.896 ceofilln508.109 -82.775 m511.609 -82.775 l511.521 -83.979 512.467 -84.19 512.31 -85.459 c510.906 -84.757 509.056 -81.867 508.81 -85.459 c507.859 -85.251 508.229 -83.779 508.109 -82.775 c0.0 sceofilln494.108 -86.801 m495.318 -88.66 492.325 -92.224 489.209 -92.167 c491.068 -90.595 493.245 -89.326 494.108 -86.801 ceofilln428.306 -87.471 m429.944 -87.689 428.985 -90.397 430.405 -90.825 c429.02 -92.962 427.683 -89.473 428.306 -87.471 c1.0 sceofilln472.408 -103.569 m471.546 -103.862 470.971 -104.428 471.008 -105.582 c468.381 -106.087 469.481 -103.02 467.508 -102.898 c468.134 -101.71 470.349 -102.044 469.607 -99.545 c470.46 -100.965 472.242 -101.493 472.408 -103.569 ceofilln489.908 -103.569 m489.57 -101.457 492.058 -102.051 491.309 -99.545 c492.63 -100.515 494.412 -101.043 494.108 -103.569 c492.57 -105.11 491.783 -104.658 489.908 -103.569 ceofilln423.405 -107.595 m424.647 -105.805 423.915 -111.524 424.105 -112.961 c422.863 -114.75 423.596 -109.03 423.405 -107.595 ceofilln450.707 -116.985 m451.855 -117.096 451.855 -112.851 450.707 -112.961 c451.451 -111.438 455.107 -112.705 457.007 -112.29 c456.223 -121.449 443.292 -119.499 440.906 -112.961 c445.277 -113.214 449.114 -111.688 450.707 -116.985 ceofilln440.906 -112.961 m443.292 -119.499 456.223 -121.449 457.007 -112.29 c455.107 -112.705 451.451 -111.438 450.707 -112.961 c451.855 -112.851 451.855 -117.096 450.707 -116.985 c449.114 -111.688 445.277 -113.214 440.906 -112.961 c424.105 -112.961 m423.915 -111.524 424.647 -105.805 423.405 -107.595 c423.596 -109.03 422.863 -114.75 424.105 -112.961 c185.394 -103.569 m185.436 -101.911 184.688 -97.609 183.993 -98.874 c185.312 -103.715 180.065 -102.266 179.093 -104.911 c188.182 -106.018 190.452 -100.591 194.494 -96.862 c192.126 -97.08 190.815 -92.836 188.894 -94.85 c190.269 -95.992 192.393 -96.416 193.094 -98.203 c189.207 -98.727 187.533 -101.372 185.394 -103.569 c430.405 -90.825 m428.985 -90.397 429.944 -87.689 428.306 -87.471 c427.683 -89.473 429.02 -92.962 430.405 -90.825 c540.312 -75.397 m504.953 -77.282 466.034 -76.428 431.105 -76.739 c432.544 -88.105 432.56 -100.835 433.906 -112.29 c462.218 -111.651 511.072 -109.362 545.911 -110.277 c544.442 -98.493 543.693 -86.02 541.011 -75.397 ch431.806 -53.933 m430.96 -53.791 431.375 -53.188 431.806 -52.591 c431.263 -52.441 430.425 -52.572 430.405 -51.92 c430.833 -51.883 431.234 -51.82 431.105 -51.25 c427.934 -50.69 430.186 -58.35 431.806 -55.274 c430.668 -55.475 429.917 -54.368 431.105 -53.933 c431.104 -54.305 431.673 -54.694 431.806 -53.933 c431.105 -50.579 m429.524 -46.889 432.835 -44.021 428.306 -42.529 c430.559 -45.576 427.428 -48.271 431.105 -50.579 c429.006 -41.859 m431.135 -40.424 429.522 -34.865 428.306 -32.468 c426.215 -35.179 429.978 -40.22 429.006 -41.859 c433.906 -59.299 m467.277 -61.479 504.295 -63.707 540.312 -65.336 c542.679 -65.303 543.348 -66.897 544.512 -68.019 c543.232 -56.276 540.656 -45.776 538.911 -34.48 c499.032 -31.887 468.391 -29.707 431.105 -26.432 c431.704 -38.723 432.988 -45.673 433.906 -59.299 c417.805 -27.102 m419.411 -38.755 419.491 -51.869 421.305 -63.323 c427.445 -61.162 423.912 -52.866 423.405 -47.225 c422.791 -40.389 422.263 -33.01 422.005 -27.102 c421.578 -27.063 421.177 -27.002 421.305 -26.432 c421.266 -26.022 421.2 -25.637 420.605 -25.761 c420.145 -26.661 419.108 -27.01 417.805 -27.102 c444.406 11.803 m444.775 2.329 446.709 -9.633 447.206 -19.053 c481.067 -21.219 507.654 -24.143 548.712 -26.432 c548.808 -27.681 549.172 -28.673 550.111 -29.114 c548.047 -18.796 546.644 -7.842 544.512 2.412 c512.655 5.229 472.271 8.489 444.406 11.803 c431.806 11.132 m432.145 5.144 431.358 -2.04 431.806 -8.32 c432.173 -13.479 431.935 -20.405 436.006 -22.406 c439.325 -20.188 437.207 -13.44 436.706 -7.649 c436.164 -1.384 435.139 4.936 435.306 10.461 c434.761 10.609 434.492 11.022 434.605 11.803 c434.566 12.212 434.501 12.597 433.906 12.474 c433.724 11.53 432.37 11.709 431.806 11.132 c291.099 24.547 m291.099 30.584 l288.612 30.792 287.068 31.878 284.798 30.584 c287.627 29.27 288.065 25.665 291.099 24.547 c548.712 14.485 m549.565 14.41 550.369 14.285 550.111 13.145 c550.081 12.431 550.441 11.44 550.812 12.474 c549.29 21.523 547.661 30.473 545.911 39.305 c517.488 43.596 487.951 46.82 458.407 50.036 c459.174 43.407 460.608 33.383 461.207 24.547 c489.498 20.354 520.27 18.535 548.712 14.485 c459.107 23.206 m459.65 32.563 458.758 41.682 455.606 50.036 c456.211 41.077 456.895 31.84 459.107 23.206 c449.307 50.707 m448.67 49.529 446.854 49.48 445.807 48.695 c446.449 38.803 448.186 29.957 448.606 19.852 c450.758 20.026 451.755 21.308 453.507 21.864 c452.55 31.903 452.953 43.245 449.307 50.707 c261.697 99.003 m266.496 98.782 272.167 96.234 274.998 96.319 c271.323 102.86 269.896 111.554 261.697 113.76 ch303.0 115.772 m300.502 114.811 297.204 114.617 294.599 113.76 c288.191 102.929 276.968 92.139 283.398 74.855 c290.589 85.405 295.729 97.919 302.299 109.064 c302.878 110.96 301.313 110.802 301.599 112.418 c305.256 112.939 306.528 115.744 310.0 116.442 c310.846 116.301 310.43 115.698 310.0 115.102 c312.257 115.621 314.137 116.504 315.6 117.784 c310.441 116.88 306.008 120.202 302.299 118.455 c303.336 118.33 302.941 116.834 303.0 115.772 c356.202 48.695 m356.612 47.3 357.673 46.527 358.302 45.341 c357.542 45.181 356.621 44.236 357.602 44.0 c357.611 45.332 359.512 44.853 359.002 46.683 c363.245 49.29 372.338 60.687 369.503 59.428 c369.542 59.837 369.607 60.222 370.203 60.098 c369.969 56.951 366.326 58.617 364.603 58.757 c365.335 56.859 363.447 54.155 364.603 54.062 c364.809 54.657 366.496 56.998 366.702 55.402 c364.903 55.338 365.701 52.784 363.902 52.72 c360.545 58.223 357.465 63.991 354.102 69.489 c354.707 62.384 360.926 58.399 356.202 48.695 c349.201 88.941 m362.053 98.986 383.324 100.964 380.703 125.834 c372.736 121.118 364.62 120.807 356.202 119.126 c353.471 118.58 351.11 116.456 347.802 116.442 c344.115 116.428 340.976 119.504 337.301 119.797 c332.525 120.177 327.116 118.04 322.6 117.113 c324.914 116.107 321.146 115.474 321.9 113.76 c328.2 113.76 l329.125 115.438 325.433 115.859 327.501 116.442 c330.774 115.108 333.572 113.316 335.901 111.076 c334.361 103.381 330.914 93.947 329.601 88.271 c331.902 89.168 330.764 88.077 331.701 90.283 c342.099 86.468 348.807 79.973 352.702 70.16 c353.492 75.701 346.735 79.582 347.102 86.929 c349.868 85.295 346.583 87.678 348.502 88.271 c349.956 87.52 349.984 87.547 349.201 88.941 c354.102 125.163 m365.544 127.169 378.804 131.006 382.104 138.578 c375.081 131.892 363.15 129.907 354.102 125.163 c242.796 92.966 m241.88 108.192 244.156 129.208 244.896 143.273 c239.955 130.17 236.285 107.105 242.796 92.966 c388.403 121.139 m393.903 127.276 393.784 139.751 391.903 144.615 c392.907 136.637 380.407 129.962 388.403 121.139 c307.899 154.006 m304.613 147.547 305.191 140.651 305.799 131.2 c307.263 130.813 307.797 129.537 310.0 129.858 c311.994 131.525 313.95 133.228 317.0 133.883 c316.564 136.48 316.42 136.645 317.7 138.578 c312.125 145.973 314.675 154.383 308.6 162.055 c309.483 158.048 303.2 152.07 307.899 154.006 c312.8 228.461 m315.047 229.05 314.251 226.722 315.6 226.449 c315.604 228.233 317.548 228.16 318.4 229.132 c316.786 229.821 316.143 231.441 313.5 231.145 c313.657 229.876 312.711 229.664 312.8 228.461 c300.899 216.388 m301.256 220.518 302.618 223.684 303.0 227.791 c295.785 231.439 304.666 240.863 310.0 234.498 c309.641 239.792 307.21 240.92 307.2 245.901 c302.201 243.472 295.592 238.216 297.399 229.803 c295.535 228.251 292.96 223.265 295.999 221.083 c296.192 222.259 294.028 224.43 295.999 225.107 c296.472 219.969 298.21 218.106 300.899 216.388 c289.699 245.23 m294.173 248.55 300.955 253.22 301.599 257.976 c299.028 252.832 291.614 248.768 289.699 245.23 c307.899 250.597 m308.51 252.941 310.588 257.381 308.6 259.987 c308.989 257.6 305.037 254.656 308.6 254.621 c307.443 254.611 308.208 252.761 307.2 252.609 c307.202 252.981 306.632 253.37 306.5 252.609 c307.655 252.599 306.891 250.749 307.899 250.597 c311.4 271.391 m312.958 273.594 313.662 279.421 311.4 281.452 c311.106 277.181 310.998 273.175 311.4 271.391 c326.801 283.464 m323.645 285.683 311.96 286.438 312.8 282.123 c315.108 285.945 324.377 282.989 326.801 283.464 c309.3 283.464 m309.015 286.491 301.809 289.471 301.599 288.16 c304.835 287.235 306.922 285.211 309.3 283.464 c296.699 290.172 m299.222 288.63 300.093 289.492 303.699 289.501 c303.655 292.552 298.743 290.818 296.699 290.172 c254.697 303.587 m252.251 303.222 249.397 299.756 250.497 298.221 c250.653 298.742 250.516 299.544 251.197 299.563 c251.354 299.042 251.216 298.24 251.897 298.221 c252.015 302.573 253.02 299.924 254.697 303.587 c387.703 314.991 m383.931 317.518 379.809 321.193 375.803 323.04 c337.156 340.858 272.046 333.811 246.997 307.612 c249.687 307.003 253.665 311.43 256.797 313.649 c292.652 339.057 370.621 337.958 396.804 304.258 c398.016 309.765 391.957 312.142 387.703 314.991 c239.996 325.723 m239.825 329.038 243.162 332.5 242.096 334.443 c240.96 332.381 238.557 328.023 239.996 325.723 c258.897 336.455 m252.857 330.614 242.625 325.219 240.696 317.674 c249.26 323.331 256.335 330.414 263.797 337.126 c261.588 337.454 261.325 335.917 258.897 336.455 c401.004 326.394 m399.797 327.266 396.705 332.1 394.004 333.772 c394.158 334.295 394.59 334.552 395.404 334.443 c395.325 336.157 394.12 336.791 393.304 337.797 c391.721 334.498 386.21 338.901 387.703 337.797 c391.603 334.546 399.437 325.275 401.004 326.394 c399.604 323.71 m391.632 332.171 382.533 343.126 367.402 342.492 c379.82 338.291 389.667 328.053 399.604 323.71 c244.896 338.468 m245.702 339.313 248.1 342.035 246.296 343.163 c243.94 342.296 244.126 330.771 244.896 338.468 c262.397 341.821 m266.738 343.699 271.917 344.774 275.698 347.188 c271.338 347.885 265.361 344.664 262.397 341.821 c401.704 327.064 m398.708 335.149 396.251 343.751 389.804 348.529 c394.293 340.481 397.984 334.951 401.704 327.064 c270.098 349.871 m273.651 348.813 283.331 350.815 284.098 353.896 c281.25 353.047 278.4 352.2 274.998 351.883 c276.001 352.865 275.535 354.009 273.598 353.896 c272.549 352.441 270.095 352.333 270.098 349.871 c257.497 351.883 m257.699 351.692 261.628 353.248 259.597 352.554 c259.054 352.704 258.216 352.572 258.197 353.225 c259.129 353.896 260.31 354.33 260.997 355.237 c258.894 355.418 256.148 352.788 257.497 351.883 c377.203 345.846 m378.514 346.826 381.842 345.873 382.804 347.188 c380.734 349.4 376.373 349.005 374.403 348.529 c375.637 347.923 376.57 347.029 377.203 345.846 c363.902 351.212 m366.568 350.894 368.272 351.497 368.803 353.225 c364.142 353.23 362.604 356.229 357.602 355.908 c359.67 352.818 355.885 354.838 354.802 353.225 c363.754 348.833 375.564 343.608 384.203 341.151 c378.763 347.249 370.329 346.707 363.902 351.212 c304.399 355.237 m309.367 354.389 318.99 354.59 322.6 357.249 c318.049 357.799 309.273 356.61 304.399 355.237 c386.304 344.504 m383.562 350.378 380.271 359.289 373.703 359.261 c377.983 354.863 382.952 347.559 386.304 344.504 c371.603 353.225 m367.71 354.423 364.802 365.927 356.902 363.286 c357.662 363.125 358.583 362.182 357.602 361.944 c356.816 361.876 356.512 362.919 356.202 361.944 c361.791 360.525 370.078 351.941 371.603 353.225 c308.6 363.957 m324.934 355.586 344.37 368.122 347.102 380.726 c342.493 366.581 323.285 358.619 308.6 363.957 c319.8 411.582 m315.023 413.818 311.234 410.792 308.6 408.898 c317.119 409.683 317.73 402.89 318.4 396.154 c313.847 387.489 304.324 380.208 304.399 369.323 c308.006 368.819 308.876 369.681 311.4 368.652 c307.689 378.628 315.154 386.669 319.8 392.8 c322.186 384.354 322.949 374.353 328.2 368.652 c330.805 369.835 333.385 369.335 335.201 367.981 c326.688 379.276 327.617 399.62 319.8 411.582 c327.501 269.378 m322.6 269.378 l321.13 260.632 316.914 254.621 317.7 247.914 c317.857 248.435 317.719 249.236 318.4 249.255 c318.066 246.853 317.262 245.379 318.4 243.219 c317.698 243.216 317.567 243.762 317.0 243.889 c318.358 241.653 316.006 236.907 318.4 239.864 c317.352 235.7 319.959 233.483 322.6 231.145 c321.516 230.396 321.143 228.964 319.1 229.132 c318.209 223.359 322.566 222.616 324.7 219.741 c325.35 221.802 329.084 220.907 330.301 222.425 c330.279 220.442 333.542 220.153 334.501 221.083 c332.215 224.93 331.089 229.888 326.801 231.815 c327.437 233.218 328.866 233.86 331.001 233.827 c331.932 230.026 339.512 222.925 335.201 222.425 c335.819 220.78 337.299 219.963 336.601 217.059 c334.429 216.178 334.604 217.24 331.701 217.059 c331.73 216.135 331.371 215.585 331.001 215.046 c332.971 217.131 340.802 213.493 343.602 214.375 c343.538 212.545 344.768 213.025 343.602 211.692 c347.513 211.298 348.997 213.229 352.702 213.033 c349.92 217.076 346.073 220.098 343.602 224.437 c347.06 224.808 342.873 224.781 342.901 225.778 c343.019 226.56 344.008 226.507 345.001 226.449 c344.618 227.424 345.819 229.916 344.302 229.803 c344.233 229.305 341.568 229.305 341.501 229.803 c340.95 232.791 341.979 234.264 342.901 235.84 c333.62 243.046 329.249 254.955 327.501 269.378 c71.988 63.452 m75.19 64.854 77.814 66.813 77.588 71.501 c88.843 73.461 89.955 85.141 94.389 93.637 c99.289 93.637 l100.435 99.065 114.086 95.906 120.29 96.99 c121.11 97.099 120.881 98.214 120.99 99.003 c133.707 99.115 139.85 105.526 153.192 105.04 c157.742 108.581 167.309 110.369 172.793 109.064 c179.777 116.142 188.263 114.573 199.394 116.442 c192.942 118.949 210.24 121.288 213.395 121.139 c216.919 125.811 223.365 127.683 223.195 135.896 c230.365 138.863 231.902 147.229 239.996 149.311 c240.101 154.104 239.949 155.726 240.696 162.055 c241.628 160.029 241.277 150.994 245.597 149.981 c248.687 150.53 251.995 149.833 253.997 152.664 c264.717 146.168 276.445 140.635 286.898 133.883 c288.442 140.015 285.188 144.035 284.098 148.64 c282.085 150.052 279.969 149.369 278.498 149.981 c279.1 150.522 278.914 151.818 279.898 151.993 c272.857 157.003 270.389 157.391 268.698 168.763 c267.877 168.654 268.107 167.54 267.998 166.751 c265.892 170.24 265.636 174.191 268.698 176.813 c268.122 178.859 266.729 178.421 267.998 180.837 c266.171 177.745 266.76 176.318 265.197 172.787 c261.265 181.377 263.206 199.305 265.197 209.68 c263.715 209.127 263.383 210.187 263.097 213.033 c261.504 212.548 262.889 209.209 260.297 209.68 c259.078 213.482 257.669 213.832 257.497 217.729 c255.328 214.287 258.865 210.56 260.297 208.338 c257.133 200.089 256.719 199.613 256.097 190.898 c255.147 199.59 250.905 209.717 254.697 217.059 c255.517 216.95 255.287 215.835 255.397 215.046 c258.126 215.63 254.389 217.795 254.697 219.07 c254.829 219.615 256.784 220.126 256.797 220.412 c256.835 221.227 254.701 221.836 254.697 221.754 c254.748 222.902 256.515 221.827 256.797 222.425 c256.554 221.91 256.152 226.146 256.097 226.449 c255.404 230.285 252.718 236.249 250.497 238.522 c250.917 241.572 250.755 243.198 251.897 246.572 c248.035 241.922 253.948 250.153 251.197 249.926 c255.398 249.473 256.996 240.732 263.097 239.864 c256.299 243.683 249.691 257.859 251.197 266.024 c250.545 264.189 247.705 264.451 246.296 263.342 c250.755 267.016 254.723 278.546 251.897 286.147 c251.906 287.724 253.807 285.902 253.297 284.806 c254.627 289.65 257.457 293.415 258.897 294.868 c256.895 296.548 252.736 295.404 249.797 293.526 c248.231 293.815 249.513 296.832 249.097 298.221 c246.199 290.817 239.14 287.001 240.696 274.074 c239.241 274.449 239.213 275.12 239.996 276.086 c236.154 274.206 242.033 272.992 242.796 271.391 c242.378 264.876 244.448 262.773 241.396 259.316 c242.404 259.692 243.104 260.363 243.496 261.329 c243.853 257.172 244.297 249.94 243.496 243.889 c242.033 243.605 241.643 244.349 240.696 244.56 c241.746 239.452 244.62 233.072 239.996 229.803 c237.942 230.88 236.193 235.81 238.596 237.182 c238.39 238.776 236.702 236.436 236.496 235.84 c230.089 238.514 234.56 249.341 235.796 251.938 c237.492 253.625 237.353 250.587 237.896 249.255 c240.165 252.384 233.58 275.508 228.795 266.024 c226.797 262.063 228.462 252.25 228.795 246.572 c225.05 256.536 225.567 272.131 237.896 272.732 c239.774 279.764 233.73 282.106 229.496 284.806 c225.178 287.558 222.336 294.917 217.595 294.868 c212.686 305.367 206.74 314.875 200.794 324.381 c201.981 336.655 198.296 346.384 200.794 355.908 c202.785 363.495 210.137 368.878 210.595 376.702 c218.609 388.922 226.706 401.063 232.296 415.606 c237.006 418.248 237.862 424.583 240.696 429.021 c250.083 432.101 253.288 441.104 262.397 444.449 c262.397 447.803 l271.344 449.292 272.312 458.426 282.698 458.535 c284.896 458.218 284.548 460.341 286.198 460.548 c294.623 460.524 303.629 459.944 308.6 463.231 c329.235 463.775 345.591 460.218 363.902 458.535 c366.289 454.114 372.183 453.054 374.403 448.474 c375.215 447.911 376.279 447.589 377.903 447.803 c385.117 439.511 394.755 433.542 403.104 426.338 c407.774 415.807 419.248 401.453 427.605 390.117 c427.787 386.937 428.332 384.106 430.405 382.738 c430.405 378.714 l439.521 362.954 445.832 329.106 432.506 312.308 c432.536 310.592 431.985 311.49 431.105 311.637 c428.293 302.144 423.28 298.4 419.205 290.843 c412.571 290.715 412.852 283.963 406.604 283.464 c404.175 281.321 405.457 275.62 401.704 274.745 c402.15 271.818 405.29 271.473 407.305 270.049 c410.933 266.431 409.264 266.431 406.604 270.049 c404.266 270.491 403.181 272.135 401.004 272.732 c401.51 274.782 400.288 275.177 400.304 276.757 c399.483 276.648 399.714 275.534 399.604 274.745 c395.828 304.747 365.267 315.206 334.501 314.991 c335.927 313.099 332.96 314.154 334.501 311.637 c333.007 311.323 333.168 312.595 333.101 313.649 c328.189 307.244 321.906 296.282 320.5 290.843 c312.896 297.83 319.043 312.756 308.6 317.674 c303.84 316.645 305.106 309.842 301.599 307.612 c306.119 300.45 306.033 293.025 317.0 292.185 c314.397 290.206 308.9 291.001 304.399 290.843 c306.656 287.192 317.93 292.181 318.4 286.818 c320.311 287.424 316.271 288.319 318.4 289.501 c338.001 289.501 l333.701 287.361 330.055 284.595 326.801 281.452 c325.453 261.088 348.013 241.605 364.603 237.182 c363.159 236.328 360.984 236.177 359.702 235.169 c362.563 239.252 356.666 234.34 354.102 236.511 c354.34 235.164 353.959 234.412 352.702 234.498 c354.491 228.909 361.311 221.284 358.302 214.375 c373.915 214.578 387.628 212.962 400.304 210.351 c404.061 213.459 401.965 222.175 405.904 225.107 c403.462 218.644 404.88 214.72 402.404 209.68 c403.049 208.508 404.593 208.199 406.604 208.338 c409.308 214.603 414.059 221.266 412.904 229.132 c414.857 229.72 416.362 230.738 418.505 231.145 c419.699 228.776 421.743 225.721 419.905 222.425 c424.084 214.456 428.896 207.888 428.306 196.936 c423.385 184.104 409.015 184.798 397.504 186.874 c398.991 181.145 397.844 172.889 398.204 166.08 c396.625 168.601 397.931 179.674 397.504 185.532 c390.178 184.465 378.929 184.465 371.603 185.532 c369.684 185.519 369.94 182.368 370.902 181.508 c370.03 180.072 369.17 184.266 368.803 185.532 c353.525 187.353 341.924 191.047 334.501 186.203 c334.352 182.466 339.798 180.567 340.102 179.495 c341.099 177.271 332.095 181.212 333.101 185.532 c330.057 186.455 323.282 186.907 321.2 184.861 c320.938 182.03 325.963 181.521 324.7 178.153 c327.806 182.509 327.499 172.85 329.601 175.471 c332.455 174.976 331.188 168.955 333.801 169.434 c335.99 168.349 331.019 168.6 332.4 166.08 c332.41 164.504 334.311 166.325 333.801 167.421 c332.895 161.781 331.273 157.57 331.001 148.64 c330.24 148.806 330.525 149.974 329.601 149.981 c331.038 148.042 325.5 143.503 328.2 140.591 c325.265 139.363 323.438 135.075 324.7 131.87 c327.669 132.229 339.268 130.912 339.401 131.2 c352.32 130.529 375.411 142.27 382.804 145.286 c384.537 144.224 383.089 140.593 382.804 139.249 c384.727 140.536 386.058 142.391 385.604 145.957 c389.419 148.561 395.013 149.462 396.804 154.006 c398.832 155.117 395.44 152.419 396.104 150.652 c398.395 149.046 400.019 146.802 404.504 147.298 c406.847 142.388 409.719 137.984 415.005 135.896 c414.936 128.227 421.337 126.758 423.405 121.139 c429.476 122.459 436.398 121.338 440.206 117.113 c441.187 117.351 440.267 118.295 439.506 118.455 c440.644 120.145 441.778 116.214 442.307 115.102 c451.886 114.25 465.622 115.221 466.107 107.723 c472.891 108.617 480.403 110.39 483.608 105.04 c482.305 104.398 481.269 107.049 480.809 105.04 c486.318 101.815 501.291 106.936 501.109 99.674 c510.051 100.993 517.076 100.198 522.811 95.648 c539.221 99.815 547.974 87.258 551.512 74.855 c558.645 69.169 568.117 65.724 576.013 60.769 c576.013 -184.063 l71.988 -184.063 lh0.0 sceofilln240.696 186.203 m240.487 182.937 239.354 169.795 241.396 172.117 c239.509 178.342 242.821 189.055 240.696 192.91 c240.575 191.107 240.851 188.61 240.696 186.203 c236.496 209.68 m239.345 209.687 239.257 207.358 240.696 207.668 c240.694 206.994 241.263 206.869 241.396 206.326 c241.823 204.722 240.518 201.459 242.096 200.96 c241.634 205.406 243.049 209.716 240.696 211.021 c240.357 210.229 239.95 209.501 239.296 209.009 c238.778 210.972 237.603 212.306 236.496 213.704 ch236.496 214.375 m236.419 218.103 235.994 221.496 234.396 223.766 c233.883 219.474 235.048 216.789 236.496 214.375 c232.996 228.461 m231.852 230.294 231.038 235.945 230.196 235.84 c230.663 232.934 230.372 229.301 232.996 228.461 c397.504 239.193 m401.338 239.737 400.915 236.201 404.504 236.511 c405.159 238.79 405.44 241.427 405.904 243.889 c400.66 244.252 398.963 243.326 397.504 239.193 c332.4 290.843 m339.01 290.771 345.818 290.507 349.901 292.855 c344.583 293.494 335.809 294.692 332.4 290.843 c382.104 286.818 m379.886 300.126 346.105 307.075 335.901 294.197 c354.41 298.166 372.812 294.284 382.104 286.818 c377.903 255.963 m378.237 264.074 385.214 270.637 385.604 274.745 c385.821 277.044 383.45 282.512 382.804 283.464 c372.045 299.295 320.358 294.333 328.9 270.049 c333.626 256.615 361.751 227.327 380.003 243.889 c378.594 248.677 377.744 252.102 377.903 255.963 c576.013 60.769 m568.117 65.724 558.645 69.169 551.512 74.855 c547.974 87.258 539.221 99.815 522.811 95.648 c517.076 100.198 510.051 100.993 501.109 99.674 c501.291 106.936 486.318 101.815 480.809 105.04 c481.269 107.049 482.305 104.398 483.608 105.04 c480.403 110.39 472.891 108.617 466.107 107.723 c465.622 115.221 451.886 114.25 442.307 115.102 c441.778 116.214 440.644 120.145 439.506 118.455 c440.267 118.295 441.187 117.351 440.206 117.113 c436.398 121.338 429.476 122.459 423.405 121.139 c421.337 126.758 414.936 128.227 415.005 135.896 c409.719 137.984 406.847 142.388 404.504 147.298 c400.019 146.802 398.395 149.046 396.104 150.652 c395.44 152.419 398.832 155.117 396.804 154.006 c395.013 149.462 389.419 148.561 385.604 145.957 c386.058 142.391 384.727 140.536 382.804 139.249 c383.089 140.593 384.537 144.224 382.804 145.286 c375.411 142.27 352.32 130.529 339.401 131.2 c339.268 130.912 327.669 132.229 324.7 131.87 c323.438 135.075 325.265 139.363 328.2 140.591 c325.5 143.503 331.038 148.042 329.601 149.981 c330.525 149.974 330.24 148.806 331.001 148.64 c331.273 157.57 332.895 161.781 333.801 167.421 c334.311 166.325 332.41 164.504 332.4 166.08 c331.019 168.6 335.99 168.349 333.801 169.434 c331.188 168.955 332.455 174.976 329.601 175.471 c327.499 172.85 327.806 182.509 324.7 178.153 c325.963 181.521 320.938 182.03 321.2 184.861 c323.282 186.907 330.057 186.455 333.101 185.532 c332.095 181.212 341.099 177.271 340.102 179.495 c339.798 180.567 334.352 182.466 334.501 186.203 c341.924 191.047 353.525 187.353 368.803 185.532 c369.17 184.266 370.03 180.072 370.902 181.508 c369.94 182.368 369.684 185.519 371.603 185.532 c378.929 184.465 390.178 184.465 397.504 185.532 c397.931 179.674 396.625 168.601 398.204 166.08 c397.844 172.889 398.991 181.145 397.504 186.874 c409.015 184.798 423.385 184.104 428.306 196.936 c428.896 207.888 424.084 214.456 419.905 222.425 c421.743 225.721 419.699 228.776 418.505 231.145 c416.362 230.738 414.857 229.72 412.904 229.132 c414.059 221.266 409.308 214.603 406.604 208.338 c404.593 208.199 403.049 208.508 402.404 209.68 c404.88 214.72 403.462 218.644 405.904 225.107 c401.965 222.175 404.061 213.459 400.304 210.351 c387.628 212.962 373.915 214.578 358.302 214.375 c361.311 221.284 354.491 228.909 352.702 234.498 c353.959 234.412 354.34 235.164 354.102 236.511 c356.666 234.34 362.563 239.252 359.702 235.169 c360.984 236.177 363.159 236.328 364.603 237.182 c348.013 241.605 325.453 261.088 326.801 281.452 c330.055 284.595 333.701 287.361 338.001 289.501 c318.4 289.501 l316.271 288.319 320.311 287.424 318.4 286.818 c317.93 292.181 306.656 287.192 304.399 290.843 c308.9 291.001 314.397 290.206 317.0 292.185 c306.033 293.025 306.119 300.45 301.599 307.612 c305.106 309.842 303.84 316.645 308.6 317.674 c319.043 312.756 312.896 297.83 320.5 290.843 c321.906 296.282 328.189 307.244 333.101 313.649 c333.168 312.595 333.007 311.323 334.501 311.637 c332.96 314.154 335.927 313.099 334.501 314.991 c365.267 315.206 395.828 304.747 399.604 274.745 c399.714 275.534 399.483 276.648 400.304 276.757 c400.288 275.177 401.51 274.782 401.004 272.732 c403.181 272.135 404.266 270.491 406.604 270.049 c409.264 266.431 410.933 266.431 407.305 270.049 c405.29 271.473 402.15 271.818 401.704 274.745 c405.457 275.62 404.175 281.321 406.604 283.464 c412.852 283.963 412.571 290.715 419.205 290.843 c423.28 298.4 428.293 302.144 431.105 311.637 c431.985 311.49 432.536 310.592 432.506 312.308 c445.832 329.106 439.521 362.954 430.405 378.714 c430.405 382.738 l428.332 384.106 427.787 386.937 427.605 390.117 c419.248 401.453 407.774 415.807 403.104 426.338 c394.755 433.542 385.117 439.511 377.903 447.803 c376.279 447.589 375.215 447.911 374.403 448.474 c372.183 453.054 366.289 454.114 363.902 458.535 c345.591 460.218 329.235 463.775 308.6 463.231 c303.629 459.944 294.623 460.524 286.198 460.548 c284.548 460.341 284.896 458.218 282.698 458.535 c272.312 458.426 271.344 449.292 262.397 447.803 c262.397 444.449 l253.288 441.104 250.083 432.101 240.696 429.021 c237.862 424.583 237.006 418.248 232.296 415.606 c226.706 401.063 218.609 388.922 210.595 376.702 c210.137 368.878 202.785 363.495 200.794 355.908 c198.296 346.384 201.981 336.655 200.794 324.381 c206.74 314.875 212.686 305.367 217.595 294.868 c222.336 294.917 225.178 287.558 229.496 284.806 c233.73 282.106 239.774 279.764 237.896 272.732 c225.567 272.131 225.05 256.536 228.795 246.572 c228.462 252.25 226.797 262.063 228.795 266.024 c233.58 275.508 240.165 252.384 237.896 249.255 c237.353 250.587 237.492 253.625 235.796 251.938 c234.56 249.341 230.089 238.514 236.496 235.84 c236.702 236.436 238.39 238.776 238.596 237.182 c236.193 235.81 237.942 230.88 239.996 229.803 c244.62 233.072 241.746 239.452 240.696 244.56 c241.643 244.349 242.033 243.605 243.496 243.889 c244.297 249.94 243.853 257.172 243.496 261.329 c243.104 260.363 242.404 259.692 241.396 259.316 c244.448 262.773 242.378 264.876 242.796 271.391 c242.033 272.992 236.154 274.206 239.996 276.086 c239.213 275.12 239.241 274.449 240.696 274.074 c239.14 287.001 246.199 290.817 249.097 298.221 c249.513 296.832 248.231 293.815 249.797 293.526 c252.736 295.404 256.895 296.548 258.897 294.868 c257.457 293.415 254.627 289.65 253.297 284.806 c253.807 285.902 251.906 287.724 251.897 286.147 c254.723 278.546 250.755 267.016 246.296 263.342 c247.705 264.451 250.545 264.189 251.197 266.024 c249.691 257.859 256.299 243.683 263.097 239.864 c256.996 240.732 255.398 249.473 251.197 249.926 c253.948 250.153 248.035 241.922 251.897 246.572 c250.755 243.198 250.917 241.572 250.497 238.522 c252.718 236.249 255.404 230.285 256.097 226.449 c256.152 226.146 256.554 221.91 256.797 222.425 c256.515 221.827 254.748 222.902 254.697 221.754 c254.701 221.836 256.835 221.227 256.797 220.412 c256.784 220.126 254.829 219.615 254.697 219.07 c254.389 217.795 258.126 215.63 255.397 215.046 c255.287 215.835 255.517 216.95 254.697 217.059 c250.905 209.717 255.147 199.59 256.097 190.898 c256.719 199.613 257.133 200.089 260.297 208.338 c258.865 210.56 255.328 214.287 257.497 217.729 c257.669 213.832 259.078 213.482 260.297 209.68 c262.889 209.209 261.504 212.548 263.097 213.033 c263.383 210.187 263.715 209.127 265.197 209.68 c263.206 199.305 261.265 181.377 265.197 172.787 c266.76 176.318 266.171 177.745 267.998 180.837 c266.729 178.421 268.122 178.859 268.698 176.813 c265.636 174.191 265.892 170.24 267.998 166.751 c268.107 167.54 267.877 168.654 268.698 168.763 c270.389 157.391 272.857 157.003 279.898 151.993 c278.914 151.818 279.1 150.522 278.498 149.981 c279.969 149.369 282.085 150.052 284.098 148.64 c285.188 144.035 288.442 140.015 286.898 133.883 c276.445 140.635 264.717 146.168 253.997 152.664 c251.995 149.833 248.687 150.53 245.597 149.981 c241.277 150.994 241.628 160.029 240.696 162.055 c239.949 155.726 240.101 154.104 239.996 149.311 c231.902 147.229 230.365 138.863 223.195 135.896 c223.365 127.683 216.919 125.811 213.395 121.139 c210.24 121.288 192.942 118.949 199.394 116.442 c188.263 114.573 179.777 116.142 172.793 109.064 c167.309 110.369 157.742 108.581 153.192 105.04 c139.85 105.526 133.707 99.115 120.99 99.003 c120.881 98.214 121.11 97.099 120.29 96.99 c114.086 95.906 100.435 99.065 99.289 93.637 c94.389 93.637 l89.955 85.141 88.843 73.461 77.588 71.501 c77.814 66.813 75.19 64.854 71.988 63.452 c71.988 480.0 l576.013 480.0 lh1.0 sceofilln342.901 235.84 m341.979 234.264 340.95 232.791 341.501 229.803 c341.568 229.305 344.233 229.305 344.302 229.803 c345.819 229.916 344.618 227.424 345.001 226.449 c344.008 226.507 343.019 226.56 342.901 225.778 c342.873 224.781 347.06 224.808 343.602 224.437 c346.073 220.098 349.92 217.076 352.702 213.033 c348.997 213.229 347.513 211.298 343.602 211.692 c344.768 213.025 343.538 212.545 343.602 214.375 c340.802 213.493 332.971 217.131 331.001 215.046 c331.371 215.585 331.73 216.135 331.701 217.059 c334.604 217.24 334.429 216.178 336.601 217.059 c337.299 219.963 335.819 220.78 335.201 222.425 c339.512 222.925 331.932 230.026 331.001 233.827 c328.866 233.86 327.437 233.218 326.801 231.815 c331.089 229.888 332.215 224.93 334.501 221.083 c333.542 220.153 330.279 220.442 330.301 222.425 c329.084 220.907 325.35 221.802 324.7 219.741 c322.566 222.616 318.209 223.359 319.1 229.132 c321.143 228.964 321.516 230.396 322.6 231.145 c319.959 233.483 317.352 235.7 318.4 239.864 c316.006 236.907 318.358 241.653 317.0 243.889 c317.567 243.762 317.698 243.216 318.4 243.219 c317.262 245.379 318.066 246.853 318.4 249.255 c317.719 249.236 317.857 248.435 317.7 247.914 c316.914 254.621 321.13 260.632 322.6 269.378 c327.501 269.378 l329.249 254.955 333.62 243.046 342.901 235.84 ceofilln347.102 380.726 m344.37 368.122 324.934 355.586 308.6 363.957 c323.285 358.619 342.493 366.581 347.102 380.726 ceofilln356.202 361.944 m356.512 362.919 356.816 361.876 357.602 361.944 c358.583 362.182 357.662 363.125 356.902 363.286 c364.802 365.927 367.71 354.423 371.603 353.225 c370.078 351.941 361.791 360.525 356.202 361.944 ceofilln373.703 359.261 m380.271 359.289 383.562 350.378 386.304 344.504 c382.952 347.559 377.983 354.863 373.703 359.261 ceofilln384.203 341.151 m375.564 343.608 363.754 348.833 354.802 353.225 c355.885 354.838 359.67 352.818 357.602 355.908 c362.604 356.229 364.142 353.23 368.803 353.225 c368.272 351.497 366.568 350.894 363.902 351.212 c370.329 346.707 378.763 347.249 384.203 341.151 ceofilln374.403 348.529 m376.373 349.005 380.734 349.4 382.804 347.188 c381.842 345.873 378.514 346.826 377.203 345.846 c376.57 347.029 375.637 347.923 374.403 348.529 ceofilln260.997 355.237 m260.31 354.33 259.129 353.896 258.197 353.225 c258.216 352.572 259.054 352.704 259.597 352.554 c261.628 353.248 257.699 351.692 257.497 351.883 c256.148 352.788 258.894 355.418 260.997 355.237 ceofilln389.804 348.529 m396.251 343.751 398.708 335.149 401.704 327.064 c397.984 334.951 394.293 340.481 389.804 348.529 ceofilln387.703 337.797 m386.21 338.901 391.721 334.498 393.304 337.797 c394.12 336.791 395.325 336.157 395.404 334.443 c394.59 334.552 394.158 334.295 394.004 333.772 c396.705 332.1 399.797 327.266 401.004 326.394 c399.437 325.275 391.603 334.546 387.703 337.797 ceofilln396.804 304.258 m370.621 337.958 292.652 339.057 256.797 313.649 c253.665 311.43 249.687 307.003 246.997 307.612 c272.046 333.811 337.156 340.858 375.803 323.04 c379.809 321.193 383.931 317.518 387.703 314.991 c391.957 312.142 398.016 309.765 396.804 304.258 ceofilln251.897 298.221 m251.216 298.24 251.354 299.042 251.197 299.563 c250.516 299.544 250.653 298.742 250.497 298.221 c249.397 299.756 252.251 303.222 254.697 303.587 c253.02 299.924 252.015 302.573 251.897 298.221 ceofilln335.901 294.197 m346.105 307.075 379.886 300.126 382.104 286.818 c372.812 294.284 354.41 298.166 335.901 294.197 c0.0 sceofilln301.599 288.16 m301.809 289.471 309.015 286.491 309.3 283.464 c306.922 285.211 304.835 287.235 301.599 288.16 c1.0 sceofilln312.8 282.123 m311.96 286.438 323.645 285.683 326.801 283.464 c324.377 282.989 315.108 285.945 312.8 282.123 ceofilln311.4 281.452 m313.662 279.421 312.958 273.594 311.4 271.391 c310.998 273.175 311.106 277.181 311.4 281.452 ceofilln306.5 252.609 m306.632 253.37 307.202 252.981 307.2 252.609 c308.208 252.761 307.443 254.611 308.6 254.621 c305.037 254.656 308.989 257.6 308.6 259.987 c310.588 257.381 308.51 252.941 307.899 250.597 c306.891 250.749 307.655 252.599 306.5 252.609 ceofilln301.599 257.976 m300.955 253.22 294.173 248.55 289.699 245.23 c291.614 248.768 299.028 252.832 301.599 257.976 ceofilln295.999 225.107 m294.028 224.43 296.192 222.259 295.999 221.083 c292.96 223.265 295.535 228.251 297.399 229.803 c295.592 238.216 302.201 243.472 307.2 245.901 c307.21 240.92 309.641 239.792 310.0 234.498 c304.666 240.863 295.785 231.439 303.0 227.791 c302.618 223.684 301.256 220.518 300.899 216.388 c298.21 218.106 296.472 219.969 295.999 225.107 ceofilln230.196 235.84 m231.038 235.945 231.852 230.294 232.996 228.461 c230.372 229.301 230.663 232.934 230.196 235.84 c0.0 sceofilln391.903 144.615 m393.784 139.751 393.903 127.276 388.403 121.139 c380.407 129.962 392.907 136.637 391.903 144.615 c1.0 sceofilln382.104 138.578 m378.804 131.006 365.544 127.169 354.102 125.163 c363.15 129.907 375.081 131.892 382.104 138.578 ceofilln348.502 88.271 m346.583 87.678 349.868 85.295 347.102 86.929 c346.735 79.582 353.492 75.701 352.702 70.16 c348.807 79.973 342.099 86.468 331.701 90.283 c330.764 88.077 331.902 89.168 329.601 88.271 c330.914 93.947 334.361 103.381 335.901 111.076 c333.572 113.316 330.774 115.108 327.501 116.442 c325.433 115.859 329.125 115.438 328.2 113.76 c321.9 113.76 l321.146 115.474 324.914 116.107 322.6 117.113 c327.116 118.04 332.525 120.177 337.301 119.797 c340.976 119.504 344.115 116.428 347.802 116.442 c351.11 116.456 353.471 118.58 356.202 119.126 c364.62 120.807 372.736 121.118 380.703 125.834 c383.324 100.964 362.053 98.986 349.201 88.941 c349.984 87.547 349.956 87.52 348.502 88.271 ceofilln354.102 69.489 m357.465 63.991 360.545 58.223 363.902 52.72 c365.701 52.784 364.903 55.338 366.702 55.402 c366.496 56.998 364.809 54.657 364.603 54.062 c363.447 54.155 365.335 56.859 364.603 58.757 c366.326 58.617 369.969 56.951 370.203 60.098 c369.607 60.222 369.542 59.837 369.503 59.428 c372.338 60.687 363.245 49.29 359.002 46.683 c359.512 44.853 357.611 45.332 357.602 44.0 c356.621 44.236 357.542 45.181 358.302 45.341 c357.673 46.527 356.612 47.3 356.202 48.695 c360.926 58.399 354.707 62.384 354.102 69.489 ceofilln513.71 33.938 m513.585 27.31 516.797 25.973 517.21 21.193 c520.433 25.449 524.141 16.739 528.41 19.852 c528.859 22.295 525.076 20.682 524.91 22.535 c532.165 29.572 519.671 43.435 513.71 33.938 c499.009 35.95 m498.933 28.274 501.324 22.965 510.21 23.877 c517.523 31.475 505.278 45.055 499.009 35.95 c483.608 43.329 m473.862 36.4 489.757 11.258 498.309 27.23 c495.953 26.805 496.118 23.964 492.709 24.547 c484.476 24.824 479.798 42.453 489.209 42.658 c494.111 42.765 494.484 35.844 497.609 35.279 c496.105 36.745 497.28 40.778 495.509 41.987 c492.297 42.364 487.997 46.449 483.608 43.329 c461.207 24.547 m460.608 33.383 459.174 43.407 458.407 50.036 c487.951 46.82 517.488 43.596 545.911 39.305 c547.661 30.473 549.29 21.523 550.812 12.474 c550.441 11.44 550.081 12.431 550.111 13.145 c550.369 14.285 549.565 14.41 548.712 14.485 c520.27 18.535 489.498 20.354 461.207 24.547 ceofilln513.71 -12.345 m514.29 -14.766 522.841 -25.274 526.311 -16.369 c526.042 -17.059 525.966 -15.34 526.311 -14.357 c525.778 -15.878 530.232 -11.084 526.311 -9.662 c528.308 -0.039 507.711 0.298 513.01 -10.333 c512.75 -11.035 513.188 -10.168 513.71 -12.345 c508.109 -14.357 m508.067 -14.385 505.99 -12.608 508.109 -15.699 c506.466 -15.913 505.481 -16.759 503.209 -16.369 c501.104 -13.021 499.115 -9.56 499.709 -3.625 c503.16 0.303 509.199 -5.246 508.109 -7.649 c511.438 -7.439 507.689 -4.61 508.81 -2.283 c495.225 4.92 494.452 -11.113 498.309 -11.004 c495.951 -17.397 505.944 -20.3 510.909 -16.369 c510.954 -14.092 510.089 -12.685 508.81 -11.674 c510.044 -10.411 510.978 -12.592 511.609 -10.333 c510.106 -9.09 506.481 -9.88 503.909 -9.662 c505.396 -13.008 509.979 -13.119 508.109 -14.357 c465.407 -3.625 m466.97 -3.917 467.903 -4.811 468.207 -6.308 c465.706 -4.497 467.644 -10.472 468.907 -12.345 c466.355 -10.606 468.975 -13.419 468.207 -15.699 c467.092 -15.825 464.534 -17.888 466.107 -18.382 c470.16 -19.059 482.469 -22.261 483.608 -14.357 c482.847 -17.136 491.803 -17.475 494.809 -16.369 c493.89 -15.987 497.907 -12.704 494.809 -11.674 c494.77 -14.549 489.864 -15.989 488.509 -13.687 c488.235 -10.549 488.082 -11.458 487.809 -8.32 c491.104 -7.623 491.329 -9.866 492.709 -11.004 c492.587 -7.262 492.76 -3.865 490.608 -4.296 c492.839 -5.624 489.197 -6.904 487.108 -6.308 c487.525 -4.918 486.243 -1.901 487.809 -1.612 c490.67 -3.498 488.209 -2.143 490.608 -1.612 c492.255 -1.824 491.024 -4.792 493.409 -4.296 c493.971 -1.969 492.366 -1.718 492.709 0.399 c488.191 -0.451 481.102 3.483 480.108 -0.271 c483.077 -0.355 483.722 -3.065 485.009 -2.954 c483.574 -3.797 484.608 -5.908 483.608 -8.32 c484.432 -8.426 485.596 -8.205 485.708 -8.991 c482.286 -9.183 485.566 -11.446 486.408 -11.674 c483.868 -11.028 485.82 -14.688 483.608 -14.357 c483.46 -13.547 482.831 -13.945 482.208 -14.357 c482.296 -12.679 483.544 -12.258 481.508 -11.674 c481.235 -12.402 480.668 -13.285 481.508 -12.345 c481.661 -14.077 478.034 -17.945 473.107 -17.04 c470.458 -10.191 471.482 -1.868 469.607 4.424 c470.708 4.488 472.035 4.334 471.708 5.766 c471.514 6.73 460.44 8.643 461.907 5.766 c462.18 6.795 462.747 5.864 461.907 5.095 c466.096 5.308 466.209 1.615 467.508 -0.942 c466.482 -0.953 465.289 1.887 465.407 -0.942 c468.336 -0.688 466.172 -3.38 465.407 -3.625 c544.512 2.412 m546.644 -7.842 548.047 -18.796 550.111 -29.114 c549.172 -28.673 548.808 -27.681 548.712 -26.432 c507.654 -24.143 481.067 -21.219 447.206 -19.053 c446.709 -9.633 444.775 2.329 444.406 11.803 c472.271 8.489 512.655 5.229 544.512 2.412 ceofilln465.407 -0.942 m465.289 1.887 466.482 -0.953 467.508 -0.942 c466.209 1.615 466.096 5.308 461.907 5.095 c462.747 5.864 462.18 6.795 461.907 5.766 c460.44 8.643 471.514 6.73 471.708 5.766 c472.035 4.334 470.708 4.488 469.607 4.424 c471.482 -1.868 470.458 -10.191 473.107 -17.04 c478.034 -17.945 481.661 -14.077 481.508 -12.345 c480.668 -13.285 481.235 -12.402 481.508 -11.674 c483.544 -12.258 482.296 -12.679 482.208 -14.357 c482.831 -13.945 483.46 -13.547 483.608 -14.357 c485.82 -14.688 483.868 -11.028 486.408 -11.674 c485.566 -11.446 482.286 -9.183 485.708 -8.991 c485.596 -8.205 484.432 -8.426 483.608 -8.32 c484.608 -5.908 483.574 -3.797 485.009 -2.954 c483.722 -3.065 483.077 -0.355 480.108 -0.271 c481.102 3.483 488.191 -0.451 492.709 0.399 c492.366 -1.718 493.971 -1.969 493.409 -4.296 c491.024 -4.792 492.255 -1.824 490.608 -1.612 c488.209 -2.143 490.67 -3.498 487.809 -1.612 c486.243 -1.901 487.525 -4.918 487.108 -6.308 c489.197 -6.904 492.839 -5.624 490.608 -4.296 c492.76 -3.865 492.587 -7.262 492.709 -11.004 c491.329 -9.866 491.104 -7.623 487.809 -8.32 c488.082 -11.458 488.235 -10.549 488.509 -13.687 c489.864 -15.989 494.77 -14.549 494.809 -11.674 c497.907 -12.704 493.89 -15.987 494.809 -16.369 c491.803 -17.475 482.847 -17.136 483.608 -14.357 c482.469 -22.261 470.16 -19.059 466.107 -18.382 c464.534 -17.888 467.092 -15.825 468.207 -15.699 c468.975 -13.419 466.355 -10.606 468.907 -12.345 c467.644 -10.472 465.706 -4.497 468.207 -6.308 c467.903 -4.811 466.97 -3.917 465.407 -3.625 c466.172 -3.38 468.336 -0.688 465.407 -0.942 c0.0 sceofilln503.909 -9.662 m506.481 -9.88 510.106 -9.09 511.609 -10.333 c510.978 -12.592 510.044 -10.411 508.81 -11.674 c510.089 -12.685 510.954 -14.092 510.909 -16.369 c505.944 -20.3 495.951 -17.397 498.309 -11.004 c494.452 -11.113 495.225 4.92 508.81 -2.283 c507.689 -4.61 511.438 -7.439 508.109 -7.649 c509.199 -5.246 503.16 0.303 499.709 -3.625 c499.115 -9.56 501.104 -13.021 503.209 -16.369 c505.481 -16.759 506.466 -15.913 508.109 -15.699 c505.99 -12.608 508.067 -14.385 508.109 -14.357 c509.979 -13.119 505.396 -13.008 503.909 -9.662 ceofilln520.01 -2.954 m522.51 -5.376 523.174 -9.944 527.011 -11.004 c524.954 -13.318 524.831 -13.35 524.21 -17.04 c522.562 -17.025 522.149 -18.195 520.01 -17.711 c519.215 -16.237 517.669 -15.482 517.21 -13.687 c517.199 -15.384 515.373 -15.244 515.109 -12.345 c518.12 -13.974 514.128 -5.783 516.51 -3.625 c517.527 -3.258 520.128 -4.409 520.01 -2.954 c1.0 sceofilln516.51 -3.625 m514.128 -5.783 518.12 -13.974 515.109 -12.345 c515.373 -15.244 517.199 -15.384 517.21 -13.687 c517.669 -15.482 519.215 -16.237 520.01 -17.711 c522.149 -18.195 522.562 -17.025 524.21 -17.04 c524.831 -13.35 524.954 -13.318 527.011 -11.004 c523.174 -9.944 522.51 -5.376 520.01 -2.954 c520.128 -4.409 517.527 -3.258 516.51 -3.625 c513.01 -10.333 m507.711 0.298 528.308 -0.039 526.311 -9.662 c530.232 -11.084 525.778 -15.878 526.311 -14.357 c525.966 -15.34 526.042 -17.059 526.311 -16.369 c522.841 -25.274 514.29 -14.766 513.71 -12.345 c513.188 -10.168 512.75 -11.035 513.01 -10.333 c0.0 sceofilln533.311 -57.957 m531.124 -56.543 533.923 -54.238 531.211 -53.933 c529.556 -54.807 529.861 -57.559 529.11 -59.299 c533.097 -58.833 534.925 -60.436 538.911 -59.97 c539.607 -57.969 539.688 -55.864 538.911 -55.274 c538.501 -57.564 536.621 -58.446 533.311 -57.957 c531.211 -49.237 m530.808 -48.059 532.057 -45.297 530.511 -45.213 c530.513 -45.585 529.943 -45.975 529.811 -45.213 c530.942 -44.062 532.738 -43.547 535.411 -43.871 c535.303 -44.768 536.511 -47.569 536.811 -45.884 c535.43 -45.418 536.983 -42.141 535.411 -41.859 c533.875 -43.528 526.524 -40.004 524.91 -42.529 c526.494 -43.248 527.988 -44.052 529.11 -45.213 c527.148 -45.871 530.127 -47.002 528.41 -47.896 c532.328 -47.169 527.048 -52.794 531.211 -52.591 c530.783 -52.629 530.382 -52.691 530.511 -53.262 c531.926 -51.304 535.653 -50.172 536.811 -53.262 c536.054 -50.916 535.984 -47.044 535.411 -47.896 c535.333 -49.609 533.066 -49.228 531.211 -49.237 c517.21 -58.628 m521.196 -58.162 523.024 -59.765 527.011 -59.299 c527.667 -58.732 528.506 -55.022 527.011 -54.604 c526.601 -56.894 524.721 -57.775 521.41 -57.286 c520.051 -51.876 518.526 -47.809 520.01 -41.188 c517.195 -41.649 516.014 -40.545 513.71 -40.518 c513.025 -43.823 516.34 -42.256 516.51 -43.2 c515.503 -48.569 520.995 -55.437 517.21 -58.628 c506.01 -48.566 m504.687 -49.932 506.695 -55.79 505.31 -57.957 c509.357 -57.433 511.294 -58.931 515.109 -58.628 c515.107 -57.43 516.995 -54.726 515.109 -53.933 c514.501 -55.586 513.479 -56.841 510.909 -56.616 c507.021 -52.478 506.979 -45.906 508.109 -40.518 c504.169 -40.451 505.05 -39.912 501.109 -39.847 c503.802 -42.594 504.768 -45.967 506.01 -48.566 c491.309 -57.286 m495.507 -56.842 498.141 -57.895 501.81 -57.957 c502.548 -57.26 503.255 -53.168 501.81 -52.591 c499.905 -59.398 492.142 -53.92 495.509 -48.566 c497.876 -48.534 498.546 -50.128 499.709 -51.25 c498.921 -49.322 499.567 -46.02 498.309 -44.542 c497.873 -47.376 496.754 -47.006 494.108 -46.555 c494.625 -43.649 492.525 -42.399 494.809 -41.188 c497.295 -40.841 498.587 -42.632 500.409 -44.542 c500.186 -42.967 499.303 -42.024 499.709 -39.847 c497.789 -39.646 490.268 -38.615 487.809 -39.176 c489.694 -41.15 490.73 -43.675 492.709 -43.871 c489.426 -46.578 494.073 -52.155 491.309 -57.286 c478.008 -52.591 m475.885 -52.569 476.264 -54.944 475.908 -56.616 c487.108 -56.616 l490.347 -52.326 487.916 -49.979 485.708 -45.884 c488.177 -38.196 479.556 -37.093 472.408 -37.834 c478.483 -43.708 475.183 -46.119 478.008 -52.591 c459.107 -54.604 m460.484 -55.52 463.105 -55.244 464.707 -55.945 c464.99 -52.991 461.353 -53.794 462.607 -49.908 c465.679 -48.632 467.864 -49.391 469.607 -51.92 c468.448 -52.599 468.848 -54.77 468.207 -55.945 c470.912 -55.813 473.366 -55.921 475.208 -56.616 c470.361 -50.975 469.731 -41.293 464.008 -36.493 c462.82 -42.957 462.148 -49.915 459.107 -54.604 c447.906 -37.834 m446.483 -45.169 454.046 -46.284 456.307 -51.92 c454.958 -52.193 455.754 -54.521 453.507 -53.933 c451.392 -52.158 449.906 -49.78 448.606 -47.225 c447.19 -48.917 450.123 -50.738 449.307 -53.933 c451.639 -54.157 452.412 -55.876 455.606 -55.274 c461.496 -48.421 453.136 -43.367 449.307 -38.505 c454.052 -35.555 454.473 -41.866 457.007 -43.2 c456.104 -40.257 455.987 -39.606 455.606 -37.163 c452.823 -35.775 449.713 -35.324 447.906 -37.834 c437.406 -57.286 m440.371 -59.115 442.306 -57.745 447.206 -58.628 c446.944 -55.432 444.229 -56.3 443.006 -53.262 c441.3 -49.024 443.648 -39.649 440.906 -34.48 c441.452 -34.332 441.72 -33.919 441.606 -33.139 c442.706 -33.075 444.033 -33.229 443.706 -31.797 c441.124 -30.694 437.121 -30.952 433.906 -30.456 c436.934 -34.807 439.159 -35.103 438.806 -40.518 c438.804 -40.145 439.373 -39.756 439.506 -40.518 c439.196 -41.807 437.896 -46.914 440.206 -47.225 c438.474 -50.775 442.523 -53.217 437.406 -57.286 c431.105 -26.432 m468.391 -29.707 499.032 -31.887 538.911 -34.48 c540.656 -45.776 543.232 -56.276 544.512 -68.019 c543.348 -66.897 542.679 -65.303 540.312 -65.336 c504.295 -63.707 467.277 -61.479 433.906 -59.299 c432.988 -45.673 431.704 -38.723 431.105 -26.432 c1.0 sceofilln428.306 -32.468 m429.522 -34.865 431.135 -40.424 429.006 -41.859 c429.978 -40.22 426.215 -35.179 428.306 -32.468 ceofilln535.411 -47.896 m535.984 -47.044 536.054 -50.916 536.811 -53.262 c535.653 -50.172 531.926 -51.304 530.511 -53.262 c530.382 -52.691 530.783 -52.629 531.211 -52.591 c527.048 -52.794 532.328 -47.169 528.41 -47.896 c530.127 -47.002 527.148 -45.871 529.11 -45.213 c527.988 -44.052 526.494 -43.248 524.91 -42.529 c526.524 -40.004 533.875 -43.528 535.411 -41.859 c536.983 -42.141 535.43 -45.418 536.811 -45.884 c536.511 -47.569 535.303 -44.768 535.411 -43.871 c532.738 -43.547 530.942 -44.062 529.811 -45.213 c529.943 -45.975 530.513 -45.585 530.511 -45.213 c532.057 -45.297 530.808 -48.059 531.211 -49.237 c533.066 -49.228 535.333 -49.609 535.411 -47.896 c0.0 sceofilln464.707 -41.859 m465.668 -42.06 464.521 -46.487 467.508 -46.555 c467.42 -48.036 464.538 -46.839 463.308 -47.225 c463.479 -45.154 464.017 -43.434 464.707 -41.859 c1.0 sceofilln431.105 -53.933 m429.917 -54.368 430.668 -55.475 431.806 -55.274 c430.186 -58.35 427.934 -50.69 431.105 -51.25 c431.234 -51.82 430.833 -51.883 430.405 -51.92 c430.425 -52.572 431.263 -52.441 431.806 -52.591 c431.375 -53.188 430.96 -53.791 431.806 -53.933 c431.673 -54.694 431.104 -54.305 431.105 -53.933 ceofilln538.911 -55.274 m539.688 -55.864 539.607 -57.969 538.911 -59.97 c534.925 -60.436 533.097 -58.833 529.11 -59.299 c529.861 -57.559 529.556 -54.807 531.211 -53.933 c533.923 -54.238 531.124 -56.543 533.311 -57.957 c536.621 -58.446 538.501 -57.564 538.911 -55.274 c0.0 sceofilln468.907 -82.105 m467.16 -82.569 470.207 -83.895 469.607 -85.459 c468.232 -83.845 466.108 -83.914 465.407 -86.13 c463.758 -85.563 465.989 -83.188 466.107 -82.105 c471.093 -79.012 478.185 -89.206 468.907 -82.105 ceofilln509.51 -82.105 m511.788 -80.185 515.938 -82.177 515.81 -84.788 c514.552 -83.087 513.049 -81.62 509.51 -82.105 ceofilln487.108 -84.117 m485.948 -82.813 488.402 -81.903 490.608 -82.775 c490.52 -83.979 491.466 -84.19 491.309 -85.459 c489.495 -83.424 488.706 -84.772 486.408 -85.459 c486.799 -84.863 488.515 -82.522 487.108 -84.117 ceofilln469.607 -106.924 m471.535 -106.088 473.003 -104.811 473.107 -102.229 c471.944 -100.884 471.229 -99.11 468.907 -98.874 c468.448 -100.67 466.902 -101.425 466.107 -102.898 c466.982 -104.52 469.638 -104.436 469.607 -106.924 c509.51 -101.558 m512.524 -102.434 511.724 -99.654 513.01 -98.874 c513.226 -100.456 515.44 -100.122 515.109 -102.229 c514.409 -103.121 513.956 -104.253 513.01 -104.911 c513.195 -103.538 510.294 -101.806 510.21 -102.898 c512.107 -103.316 511.952 -105.701 514.41 -105.582 c514.071 -103.469 516.559 -104.063 515.81 -101.558 c514.94 -100.154 513.773 -99.036 512.31 -98.203 c511.836 -99.762 509.983 -99.999 509.51 -101.558 c491.309 -98.203 m488.066 -98.293 488.341 -104.381 491.309 -106.253 c497.375 -105.275 494.477 -98.116 491.309 -98.203 c513.01 -90.154 m510.521 -91.197 512.587 -87.876 510.909 -88.142 c510.962 -89.311 510.753 -90.228 510.21 -90.825 c513.488 -90.907 509.447 -91.802 510.21 -93.508 c511.414 -93.243 512.004 -94.504 512.31 -93.508 c511.883 -93.47 511.48 -93.408 511.609 -92.837 c512.048 -90.549 516.63 -88.738 515.109 -86.801 c514.579 -89.529 511.547 -88.388 513.01 -90.154 c489.209 -92.167 m492.325 -92.224 495.318 -88.66 494.108 -86.801 c493.245 -89.326 491.068 -90.595 489.209 -92.167 c470.308 -90.154 m470.268 -90.563 470.203 -90.948 469.607 -90.825 c468.905 -90.827 468.774 -90.281 468.207 -90.154 c468.003 -90.566 466.466 -92.736 468.207 -92.837 c468.221 -90.572 472.396 -91.906 473.808 -86.801 c471.348 -89.656 469.983 -87.971 468.207 -89.483 c469.031 -89.589 470.194 -89.368 470.308 -90.154 c508.81 -85.459 m509.056 -81.867 510.906 -84.757 512.31 -85.459 c512.467 -84.19 511.521 -83.979 511.609 -82.775 c508.109 -82.775 l508.229 -83.779 507.859 -85.251 508.81 -85.459 c515.81 -84.788 m515.938 -82.177 511.788 -80.185 509.51 -82.105 c513.049 -81.62 514.552 -83.087 515.81 -84.788 c466.107 -82.105 m465.989 -83.188 463.758 -85.563 465.407 -86.13 c466.108 -83.914 468.232 -83.845 469.607 -85.459 c470.207 -83.895 467.16 -82.569 468.907 -82.105 c478.185 -89.206 471.093 -79.012 466.107 -82.105 c486.408 -85.459 m488.706 -84.772 489.495 -83.424 491.309 -85.459 c491.466 -84.19 490.52 -83.979 490.608 -82.775 c488.402 -81.903 485.948 -82.813 487.108 -84.117 c488.515 -82.522 486.799 -84.863 486.408 -85.459 c541.011 -75.397 m543.693 -86.02 544.442 -98.493 545.911 -110.277 c511.072 -109.362 462.218 -111.651 433.906 -112.29 c432.56 -100.835 432.544 -88.105 431.105 -76.739 c466.034 -76.428 504.953 -77.282 540.312 -75.397 ch1.0 sceofilln468.207 -89.483 m469.983 -87.971 471.348 -89.656 473.808 -86.801 c472.396 -91.906 468.221 -90.572 468.207 -92.837 c466.466 -92.736 468.003 -90.566 468.207 -90.154 c468.774 -90.281 468.905 -90.827 469.607 -90.825 c470.203 -90.948 470.268 -90.563 470.308 -90.154 c470.194 -89.368 469.031 -89.589 468.207 -89.483 c0.0 sceofilln515.109 -86.801 m516.63 -88.738 512.048 -90.549 511.609 -92.837 c511.48 -93.408 511.883 -93.47 512.31 -93.508 c512.004 -94.504 511.414 -93.243 510.21 -93.508 c509.447 -91.802 513.488 -90.907 510.21 -90.825 c510.753 -90.228 510.962 -89.311 510.909 -88.142 c512.587 -87.876 510.521 -91.197 513.01 -90.154 c511.547 -88.388 514.579 -89.529 515.109 -86.801 ceofilln193.094 -98.203 m192.393 -96.416 190.269 -95.992 188.894 -94.85 c190.815 -92.836 192.126 -97.08 194.494 -96.862 c190.452 -100.591 188.182 -106.018 179.093 -104.911 c180.065 -102.266 185.312 -103.715 183.993 -98.874 c184.688 -97.609 185.436 -101.911 185.394 -103.569 c187.533 -101.372 189.207 -98.727 193.094 -98.203 c1.0 sceofilln494.108 -103.569 m494.412 -101.043 492.63 -100.515 491.309 -99.545 c492.058 -102.051 489.57 -101.457 489.908 -103.569 c491.783 -104.658 492.57 -105.11 494.108 -103.569 c491.309 -106.253 m488.341 -104.381 488.066 -98.293 491.309 -98.203 c494.477 -98.116 497.375 -105.275 491.309 -106.253 c0.0 sceofilln512.31 -98.203 m513.773 -99.036 514.94 -100.154 515.81 -101.558 c516.559 -104.063 514.071 -103.469 514.41 -105.582 c511.952 -105.701 512.107 -103.316 510.21 -102.898 c510.294 -101.806 513.195 -103.538 513.01 -104.911 c513.956 -104.253 514.409 -103.121 515.109 -102.229 c515.44 -100.122 513.226 -100.456 513.01 -98.874 c511.724 -99.654 512.524 -102.434 509.51 -101.558 c509.983 -99.999 511.836 -99.762 512.31 -98.203 ceofilln469.607 -99.545 m470.349 -102.044 468.134 -101.71 467.508 -102.898 c469.481 -103.02 468.381 -106.087 471.008 -105.582 c470.971 -104.428 471.546 -103.862 472.408 -103.569 c472.242 -101.493 470.46 -100.965 469.607 -99.545 c466.107 -102.898 m466.902 -101.425 468.448 -100.67 468.907 -98.874 c471.229 -99.11 471.944 -100.884 473.107 -102.229 c473.003 -104.811 471.535 -106.088 469.607 -106.924 c469.638 -104.436 466.982 -104.52 466.107 -102.898 ceofilln495.509 41.987 m497.28 40.778 496.105 36.745 497.609 35.279 c494.484 35.844 494.111 42.765 489.209 42.658 c479.798 42.453 484.476 24.824 492.709 24.547 c496.118 23.964 495.953 26.805 498.309 27.23 c489.757 11.258 473.862 36.4 483.608 43.329 c487.997 46.449 492.297 42.364 495.509 41.987 ceofilln440.206 -47.225 m437.896 -46.914 439.196 -41.807 439.506 -40.518 c439.373 -39.756 438.804 -40.145 438.806 -40.518 c439.159 -35.103 436.934 -34.807 433.906 -30.456 c437.121 -30.952 441.124 -30.694 443.706 -31.797 c444.033 -33.229 442.706 -33.075 441.606 -33.139 c441.72 -33.919 441.452 -34.332 440.906 -34.48 c443.648 -39.649 441.3 -49.024 443.006 -53.262 c444.229 -56.3 446.944 -55.432 447.206 -58.628 c442.306 -57.745 440.371 -59.115 437.406 -57.286 c442.523 -53.217 438.474 -50.775 440.206 -47.225 ceofilln516.51 -43.2 m516.34 -42.256 513.025 -43.823 513.71 -40.518 c516.014 -40.545 517.195 -41.649 520.01 -41.188 c518.526 -47.809 520.051 -51.876 521.41 -57.286 c524.721 -57.775 526.601 -56.894 527.011 -54.604 c528.506 -55.022 527.667 -58.732 527.011 -59.299 c523.024 -59.765 521.196 -58.162 517.21 -58.628 c520.995 -55.437 515.503 -48.569 516.51 -43.2 ceofilln484.309 -55.274 m485.772 -52.598 485.405 -51.125 484.309 -48.566 c482.665 -48.353 481.681 -47.507 479.408 -47.896 c479.966 -50.419 479.157 -55.492 484.309 -55.274 c478.708 -45.213 m480.301 -45.538 482.284 -46.543 483.608 -45.213 c483.77 -42.599 482.104 -41.735 481.508 -39.847 c478.708 -39.847 l477.185 -41.067 480.231 -43.992 478.708 -45.213 c472.408 -37.834 m479.556 -37.093 488.177 -38.196 485.708 -45.884 c487.916 -49.979 490.347 -52.326 487.108 -56.616 c475.908 -56.616 l476.264 -54.944 475.885 -52.569 478.008 -52.591 c475.183 -46.119 478.483 -43.708 472.408 -37.834 ceofilln492.709 -43.871 m490.73 -43.675 489.694 -41.15 487.809 -39.176 c490.268 -38.615 497.789 -39.646 499.709 -39.847 c499.303 -42.024 500.186 -42.967 500.409 -44.542 c498.587 -42.632 497.295 -40.841 494.809 -41.188 c492.525 -42.399 494.625 -43.649 494.108 -46.555 c496.754 -47.006 497.873 -47.376 498.309 -44.542 c499.567 -46.02 498.921 -49.322 499.709 -51.25 c498.546 -50.128 497.876 -48.534 495.509 -48.566 c492.142 -53.92 499.905 -59.398 501.81 -52.591 c503.255 -53.168 502.548 -57.26 501.81 -57.957 c498.141 -57.895 495.507 -56.842 491.309 -57.286 c494.073 -52.155 489.426 -46.578 492.709 -43.871 ceofilln501.109 -39.847 m505.05 -39.912 504.169 -40.451 508.109 -40.518 c506.979 -45.906 507.021 -52.478 510.909 -56.616 c513.479 -56.841 514.501 -55.586 515.109 -53.933 c516.995 -54.726 515.107 -57.43 515.109 -58.628 c511.294 -58.931 509.357 -57.433 505.31 -57.957 c506.695 -55.79 504.687 -49.932 506.01 -48.566 c504.768 -45.967 503.802 -42.594 501.109 -39.847 ceofillQQQ[/EMC PDFMark5PDFVars/TermAll get exec end end%%PageTrailer%%Trailer%%EOF